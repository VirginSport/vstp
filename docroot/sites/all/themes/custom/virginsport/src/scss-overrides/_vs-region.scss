// This file covers specific behaviour of the vs-region component when injected
// into Drupal, specifically, the overlapping mechanism.

// Variables
@import "../scss/variables";
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/mixins";

// The different overlap sizes and breakpoints supported by the region style.
$vs-region-overlap-sizes: (
  'small': (
    'xs': 0,
    'sm': 0,
    'md': 20px,
    'lg': 40px,
    'xl': 80px,
  ),
  'medium': (
    'xs': 0,
    'sm': 20px,
    'md': 40px,
    'lg': 80px,
    'xl': 160px,
  ),
  'large': (
    'xs': 20px,
    'sm': 40px,
    'md': 80px,
    'lg': 160px,
    'xl': 320px,
  )
);

// In order for users not to see a FOUC while region curve styles are being
// rendered, add a smooth opacity transition to the HTML element if it has
// the vs-region-loading attribute which is added via a script in the
// <head> tag and removed via JS once the regions are rendered for the
// first time.
html { @include transition(opacity 0.3s ease); }
html[vs-region-loading="true"] { opacity: 0; }

// For the first ctools region, forcefully disable the spacer
.vs-head-region {
  .vs-region { padding: 0; }

  .vs-region__bg,
  .vs-region__bg-spacer {
    display: none;
  }
}

// Forcefully hide the spacer if the region is set to hide
// the spacer.
.vs-region--hide-bg-spacer {
  .vs-region__bg-spacer {
    display: none;
  }
}

// --------------------------------------------------------
// TODO FRI Override!!! Needs to be migrated to FRI
.vs-region {
  padding-bottom: 0;
}
// --------------------------------------------------------

// Ensure regions curves are visible
.vs-region {
  z-index: 1;
}

// Ensure children of the region are visible even with the background active
.vs-region > * {
  z-index: 1;
  position: relative;
}

// If the region is not curved, then force the spacer max height to be 0
.vs-region__bg-spacer[data-vs-region-curved="0"] {
  max-height: 0;
}

// Generate the different classes for the overlap mechanism
@each $size-name in map-keys($vs-region-overlap-sizes) {
  $size: map_get($vs-region-overlap-sizes, $size-name);

  .vs-region[data-vs-region-overlap="#{$size-name}"] > :first-child {
    @each $break-point in map-keys($size) {
      @include media-breakpoint-only($break-point) {
        margin-top: -(map-get($size, $break-point));
      }
    }
  }

  .vs-region__bg-spacer[data-vs-region-overlap="#{$size-name}"] {
    @each $break-point in map-keys($size) {
      @include media-breakpoint-only($break-point) {
        padding-bottom: map-get($size, $break-point);
      }
    }
  }
}

@each $color in map-keys($color-schemes) {
  $map: map_get($color-schemes, $color);

  .vs-region--gradient-#{$color} {

    .vs-region__bg {
      // HACK: We're passing the background rotation value vie the background
      // size property to the JS. This value will be parsed by the JS and
      // transformed to the rotation value of the region background.
      background-size: str-replace(inspect(map_get($map, 'rotate')), 'deg', '%');
    }

    .vs-region__bg .stop-a {
      stop-color: map_get($map, 'from');
    }

    .vs-region__bg .stop-b {
      stop-color: map_get($map, 'to');
    }
  }
}
