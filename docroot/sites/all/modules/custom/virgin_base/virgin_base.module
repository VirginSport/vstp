<?php
/**
 * @file
 * Code for the Virgin Base feature.
 */

include_once 'virgin_base.features.inc';

/**
 * Implements hook_menu().
 */
function virgin_base_menu() {
  $items['ajax/festival/%/events'] = array(
    'title' => 'Festival events',
    'page callback' => 'virgin_base_ajax_festival_events',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'virgin_base.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_element_info_alter().
 */
function virgin_base_element_info_alter(&$elements) {
  if (!empty($elements['link_field'])) {
    $elements['link_field']['#process'][] = 'virgin_base_link_field_process';
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function virgin_base_field_attach_validate($entity_type, $entity, &$errors) {
  // Make field_cta_links url required if title is not empty and virgin_type
  // field has link option selected
  if (!empty($entity->field_cta_links[LANGUAGE_NONE])) {
    foreach ($entity->field_cta_links[LANGUAGE_NONE] as $delta => $cta_link) {
      if ($cta_link['attributes']['virgin_type'] == 'link' && !empty($cta_link['title']) && empty($cta_link['url'])) {
        $errors['field_cta_links'][LANGUAGE_NONE][$delta][] = array(
          'error' => 'link_required',
          'message' => t('Url must be provided with Link type'),
          'error_element' => array('url' => TRUE),
        );
      }
    }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Change the access to region field_hostname
 *
 */

function virgin_base_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  $form['field_hostname']['#access'] = FALSE;

  if ($user->uid == 1 || (!empty($user->roles[3]))) {
    $form['field_hostname']['#access'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form.
 *
 * Modifies the fieldable panel panes edit form for improved editing interface.
 */
function virgin_base_form_fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form_alter(&$form, &$form_state, $form_id) {
  $form['extra_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra Configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 100
  );

  $move_to_extra = array(
    'view_mode',
    'link',
    'language'
  );

  foreach ($move_to_extra as $field_name) {
    $form['extra_config'][$field_name] = $form[$field_name];
    unset($form[$field_name]);
  }
}

// Helpers
// ----------------------------------------------------------------------------

/**
 * Convert the link field class to a select
 *
 * @see link_field_process
 */
function virgin_base_link_field_process($element, $form_state, $complete_form) {
  // The supported link fields to override class textfield with a select list
  $supported = array(
    'field_cta_links'
  );

  // If current element is not on supported list do not make changes
  if (!in_array($element['#field_name'], $supported)) {
    return $element;
  }

  // Field brand color has the virgin brand colors
  $field = field_info_field('field_brand_color');

  // Extra button color options not covered by brand colors
  $options = array(
    '' => t('Default'),
    'transparent' => t('Transparent'),
    'orange' => t('Solid Orange'),
    'link' => t('Link'),
    'outline-black' => t('Outline-black'),
    'outline-white' => t('Outline-white'),
  );

  // Append gradient prefix to all brand colors
  foreach ($field['settings']['allowed_values'] as $key => $value) {
    $options['gradient-' . $key] = $value;
  }

  // Load element attributes
  $attributes = empty($element['#value']['attributes']) ? '' : $element['#value']['attributes'];

  // Add a new field to choose the button style
  $element['attributes']['virgin_class'] = array(
    '#type' => 'select',
    '#title' => t('Button Style'),
    '#options' => empty($options) ? array() : $options,
    '#default_value' => isset($attributes['virgin_class']) ? $attributes['virgin_class'] : '',
  );

  // The type field options
  $types = array(
    'link' => 'Link',
    'contact_form' => 'Get in Touch',
    'register_interest_form' => 'Register Interest'
  );

  // Generate a unique id for this field to add #states based on it
  $id = drupal_html_id('link_' . $element['#field_name'] . '_attributes_virgin_type_ ' . $element['#delta']);

  // Add a new field to choose between a link field and CTA buttons
  $element['attributes']['virgin_type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $types,
    '#default_value' => isset($attributes['virgin_type']) ? $attributes['virgin_type'] : '',
    '#attributes' => array(
      'id' => $id,
    ),
  );

  $element['attributes']['virgin_festival'] = array(
    '#type' => 'textfield',
    '#title' => t('Festival Id'),
    '#default_value' => isset($attributes['virgin_festival']) ? $attributes['virgin_festival'] : '',
    '#states' => array(
      'visible' => array(
        array(
          array(
            '#' . $id => array('value' => 'get_in_touch'),
          ),
          'or',
          array(
            '#' . $id => array('value' => 'register_interest'),
          ),
        ),
      )
    )
  );

  $element['attributes']['virgin_event'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Id'),
    '#default_value' => isset($attributes['virgin_event']) ? $attributes['virgin_event'] : '',
    '#states' => array(
      'visible' => array(
        '#' . $id => array('value' => 'get_in_touch'),
      )
    )
  );

  // Show url field if virgin_type value is link
  $element['url']['#states'] = array(
    // Hide the settings when the cancel notify checkbox is disabled.
    'visible' => array(
      '#' . $id => array('value' => 'link'),
    )
  );

  return $element;
}

/**
 * Returns an array of published festivals
 *
 * @return array
 */
function virgin_base_festivals() {
  $ids = db_query("
    SELECT n.nid
    FROM {node} n
    WHERE n.type = 'festival'
    AND n.status = 1
  ")->fetchCol();

  $nodes = node_load_multiple($ids);

  $list = array_map(function ($node) {
    return $node->title;
  }, $nodes);

  asort($list);

  return $list;
}

/**
 * Returns an array of published events
 *
 * @param $festival_id
 *  The festival id to filter events
 * @return array
 */
function virgin_base_events($festival_id) {
  $festival_grapher = new VirginEntityGrapher('node', node_load($festival_id));
  $festival_state_grapher = $festival_grapher->relation('field_festival_state');

  // Get events related to given festival
  $sql = "
    select ev.nid
    from {node} n
    join {field_data_field_festival_state} fs on fs.field_festival_state_target_id = n.nid
    join {field_data_field_event_state} es on es.entity_type = 'node' and es.field_event_state_target_id = fs.entity_id
    join {node} ev on ev.nid = es.entity_id and ev.type = 'event'
    where n.nid = :id and ev.status = 1
    group by ev.nid
  ";

  $ids = db_query($sql, array(':id' => $festival_state_grapher->property('nid')))->fetchCol();

  $nodes = node_load_multiple($ids);

  $list = array_map(function ($node) {
    return $node->title;
  }, $nodes);

  asort($list);

  return $list;
}
