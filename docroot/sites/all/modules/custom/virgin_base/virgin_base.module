<?php
/**
 * @file
 * Code for the Virgin Base feature.
 */

include_once 'virgin_base.features.inc';

/**
 * Set Form keys
 */
define('VIRGIN_BASE_LINK', 'link');
define('VIRGIN_BASE_CONTACT_FORM', 'contact_form');
define('VIRGIN_BASE_REGISTER_INTEREST_FORM', 'register_interest_form');

/**
 * Implements hook_menu().
 */
function virgin_base_menu() {
  $items['ajax/festival/%/events'] = array(
    'title' => 'Festival events',
    'page callback' => 'virgin_base_ajax_festival_events',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'virgin_base.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function virgin_base_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['alternate_teaser'] = array(
    'label' => t('Alternate Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_element_info_alter().
 */
function virgin_base_element_info_alter(&$elements) {
  if (!empty($elements['link_field'])) {
    $elements['link_field']['#process'][] = 'virgin_base_cta_link_field_process';
    $elements['link_field']['#process'][] = 'virgin_base_link_field_process';
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function virgin_base_field_attach_validate($entity_type, $entity, &$errors) {
  // Make field_cta_links url required if title is not empty and virgin_type
  // field has link option selected
  if (!empty($entity->field_cta_links[LANGUAGE_NONE])) {
    foreach ($entity->field_cta_links[LANGUAGE_NONE] as $delta => $cta_link) {
      if ($cta_link['attributes']['virgin_type'] == 'link' && !empty($cta_link['title']) && empty($cta_link['url'])) {
        $errors['field_cta_links'][LANGUAGE_NONE][$delta][] = array(
          'error' => 'link_required',
          'message' => t('Url must be provided with Link type'),
          'error_element' => array('url' => TRUE),
        );
      }
    }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Change the access to region field_hostname
 */
function virgin_base_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if (!empty($form['field_hostname'])) {
    $roles = array_values($user->roles);

    if ($user->uid != 1 || !in_array('administrator', $roles)) {
      $form['field_hostname']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form.
 *
 * Modifies the fieldable panel panes edit form for improved editing interface.
 */
function virgin_base_form_fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form_alter(&$form, &$form_state, $form_id) {
  $form['extra_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra Configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 100
  );

  $move_to_extra = array(
    'view_mode',
    'link',
    'language'
  );

  foreach ($move_to_extra as $field_name) {
    $form['extra_config'][$field_name] = $form[$field_name];
    unset($form[$field_name]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for scald_extra_atom_add_form_options.
 */
function virgin_base_form_scald_extra_atom_add_form_options_alter(&$form, &$form_state, $form_id) {

  // Hide the authors and actions fields from the scald interface
  if (!empty($form['atom0'])) {
    $form['atom0']['scald_authors']['#access'] = FALSE;
    $form['atom0']['scald_actions']['#access'] = FALSE;
    $form['atom0']['redirect']['#access'] = FALSE;
  }
}

/**
 * Implements hook_views_post_render().
 */
function virgin_base_views_pre_build(&$view) {

  // Remove action links, and extra filters for the scald atoms admin view
  if ($view->name == 'scald_atoms') {

    // Remove the action links
    $view->header = array();

    // Remove the extra filters
    $whitelisted_filters = array(
      'title',
      'scald_tags_tid'
    );

    foreach ($view->filter as $key => $filter) {
      if (in_array($key, $whitelisted_filters)) {
        continue;
      }

      unset($view->filter[$key]);
    }
  }
}

/**
 * Implements hook_date_select_process_alter().
 */
function virgin_base_date_select_process_alter(&$element, &$form_state, $context) {
  // Override date fields label to remove -
  $element['day']['#options'][''] = t('Day');
  $element['month']['#options'][''] = t('Month');
  $element['year']['#options'][''] = t('Year');
}

/**
 * Implements hook_metatag_pattern_alter().
 */
function virgin_base_metatag_pattern_alter(&$pattern, &$types, $tag_name) {
  $image_tags = array(
    'og:image',
    'twitter:image'
  );

  // Override the og image metatag with the header image if the node has one
  if (in_array($tag_name, $image_tags) && !empty($types['node'])) {
    if (!empty($types['node']->field_header_image['und'][0]['sid'])) {
      $atom = scald_atom_load($types['node']->field_header_image['und'][0]['sid']);

      if ($atom) {
        $pattern = image_style_url('virgin_original', $atom->file_source);
      } else {
        $pattern = '';
      }
    }
  }
}

/**
 * Implements hook_metatag_metatags_view_alter().
 */
function virgin_base_metatag_metatags_view_alter(&$output, $instance, $options) {
  if (module_exists('metatag_twitter_cards')) {
    // Add site name to twitter site variable not available by default on metatag
    $output['twitter:site']['#attached']['drupal_add_html_head'][0] = array(
      array(
        '#theme' => 'metatag_twitter_cards',
        '#tag' => 'meta',
        '#id' => 'twitter:site',
        '#name' => 'twitter:site',
        '#value' => variable_get('site_name', ''),
      ),
      'twitter:site',
    );
  }
}

// Helpers
// ----------------------------------------------------------------------------

/**
 * Convert the cta links field class to a select
 *
 * @see link_field_process
 */
function virgin_base_cta_link_field_process($element, $form_state, $complete_form) {
  // The supported link fields to override class textfield with a select list
  $supported = array(
    'field_cta_links',
    'field_cta_link'
  );

  // If current element is not on supported list do not make changes
  if (!in_array($element['#field_name'], $supported)) {
    return $element;
  }

  // Field brand color has the virgin brand colors
  $field = field_info_field('field_brand_color');

  // Extra button color options not covered by brand colors
  $options = array(
    '' => t('Default'),
    'transparent' => t('Transparent'),
    'orange' => t('Solid Orange'),
    'link' => t('Link'),
    'outline-black' => t('Outline-black'),
    'outline-white' => t('Outline-white'),
  );

  // Append gradient prefix to all brand colors
  foreach ($field['settings']['allowed_values'] as $key => $value) {
    $options['gradient-' . $key] = $value;
  }

  // Load element attributes
  $attributes = empty($element['#value']['attributes']) ? '' : $element['#value']['attributes'];

  // Add a new field to choose the button style
  $element['attributes']['virgin_class'] = array(
    '#prefix' => '<div class="vs-cta-btn__style">',
    '#suffix' => '</div>',
    '#type' => 'select',
    '#title' => t('Button Style'),
    '#options' => empty($options) ? array() : $options,
    '#default_value' => isset($attributes['virgin_class']) ? $attributes['virgin_class'] : '',
  );


  // The type field options
  $types = array(
    VIRGIN_BASE_LINK => 'Link',
    VIRGIN_BASE_CONTACT_FORM => 'Get in Touch',
    VIRGIN_BASE_REGISTER_INTEREST_FORM => 'Register Interest'
  );

  // Generate a unique id for this field to add #states based on it
  $id = drupal_html_id('link_' . $element['#field_name'] . '_attributes_virgin_type_ ' . $element['#delta']);

  // Add a new field to choose between a link field and CTA buttons
  $element['attributes']['virgin_type'] = array(
    '#prefix' => '<div class="vs-cta-btn__type">',
    '#suffix' => '</div>',
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $types,
    '#default_value' => isset($attributes['virgin_type']) ? $attributes['virgin_type'] : '',
    '#attributes' => array(
      'id' => $id,
    ),
  );

  $element['attributes']['virgin_gtm_event'] = array(
    '#prefix' => '<div class="vs-cta-btn__gtm">',
    '#suffix' => '</div>',
    '#type' => 'textfield',
    '#title' => t('GTM Event Name'),
    '#default_value' => isset($attributes['virgin_gtm_event']) ? $attributes['virgin_gtm_event'] : '',
  );

  $element['attributes']['virgin_show_region_modal'] = array(
    '#prefix' => '<div class="vs-cta-btn__show_region">',
    '#suffix' => '</div>',
    '#type' => 'checkbox',
    '#title' => t('Check region'),
    '#description' => t('If page is on other region then display modal'),
    '#default_value' => isset($attributes['virgin_show_region_modal']) ? $attributes['virgin_show_region_modal'] : FALSE,
  );

  $element['attributes']['virgin_festival'] = array(
    '#prefix' => '<div class="vs-cta-btn__festival">',
    '#suffix' => '</div>',
    '#type' => 'textfield',
    '#title' => t('Festival Id'),
    '#default_value' => isset($attributes['virgin_festival']) ? $attributes['virgin_festival'] : '',
    '#states' => array(
      'visible' => array(
        array(
          array(
            '#' . $id => array('value' => VIRGIN_BASE_CONTACT_FORM),
          ),
          'or',
          array(
            '#' . $id => array('value' => VIRGIN_BASE_REGISTER_INTEREST_FORM),
          ),
        ),
      )
    )
  );

  $element['attributes']['virgin_event'] = array(
    '#prefix' => '<div class="vs-cta-btn__event">',
    '#suffix' => '</div>',
    '#type' => 'textfield',
    '#title' => t('Event Id'),
    '#default_value' => isset($attributes['virgin_event']) ? $attributes['virgin_event'] : '',
    '#states' => array(
      'visible' => array(
        array(
          '#' . $id => array('value' => VIRGIN_BASE_CONTACT_FORM),
        ),
        'or',
        array(
          '#' . $id => array('value' => VIRGIN_BASE_REGISTER_INTEREST_FORM),
        ),
      )
    )
  );

  // Show url field if virgin_type value is link
  $element['url']['#states'] = array(
    // Hide the settings when the cancel notify checkbox is disabled.
    'visible' => array(
      '#' . $id => array('value' => VIRGIN_BASE_LINK),
    )
  );

  return $element;
}

/**
 * Convert the cta links field class to a select
 *
 * @see link_field_process
 */
function virgin_base_link_field_process($element, $form_state, $complete_form) {
  if ($element['#field_name'] != 'field_links') {
    return $element;
  }

  // Load element attributes
  $attributes = empty($element['#value']['attributes']) ? array() : $element['#value']['attributes'];

  $element['attributes']['virgin_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Visible'),
    '#default_value' => isset($attributes['virgin_show']) ? $attributes['virgin_show'] : TRUE
  );

  return $element;
}

/**
 * Returns an array of published festivals
 *
 * @return array
 */
function virgin_base_festivals() {
  $ids = db_query("
    SELECT n.nid
    FROM {node} n
    WHERE n.type = 'festival'
    AND n.status = 1
  ")->fetchCol();

  $nodes = node_load_multiple($ids);

  $list = array_map(function ($node) {
    return $node->title;
  }, $nodes);

  asort($list);

  return $list;
}

/**
 * Returns an array of published events
 *
 * @param $festival_id
 *  The festival id to filter events
 * @return array
 * An array with the festival events or all if festival_id does not exist
 */
function virgin_base_events($festival_id) {
  // Get events related to given festival
  $query = db_select('node', 'n');

  $query->join('field_data_field_festival_state', 'fs', 'fs.field_festival_state_target_id = n.nid');
  $query->join('field_data_field_event_state', 'es', 'es.field_event_state_target_id = fs.entity_id');
  $query->join('node', 'ev', 'ev.nid = es.entity_id');

  $query
    ->fields('ev', array('nid'))
    ->condition('ev.status', 1, '=')
    ->condition('es.entity_type', 'node', '=')
    ->condition('ev.type', 'event', '=')
    ->groupBy('ev.nid')
  ;

  $festival = node_load($festival_id);

  // If festival exists add filter
  if (!empty($festival->nid)) {
    $festival_grapher = new VirginEntityGrapher('node', $festival);
    $festival_state_grapher = $festival_grapher->relation('field_festival_state');

    $query->condition('n.nid', $festival_state_grapher->property('nid'), '=');
  }

  $ids = $query->execute()->fetchCol();

  $nodes = node_load_multiple($ids);

  $list = array_map(function ($node) {
    return $node->title;
  }, $nodes);

  asort($list);

  return $list;
}

/**
 * Fetch a grapher object containing the festival related to the given
 * event ID
 *
 * @param $event_nid
 *  The event node ID
 * @return \VirginEntityGrapher|NULL
 *  A grapher containing the festival, or NULL if no related festival could
 *  be found.
 */
function virgin_base_event_festival($event_nid) {
  $sql = "
        SELECT fs2.entity_id AS festival_nid
        FROM {field_data_field_event_state} es
        JOIN {field_data_field_festival_state} fs1
          ON fs1.entity_id = es.field_event_state_target_id
          AND fs1.entity_type = 'node'
          AND fs1.bundle = 'event_state'
        JOIN {field_data_field_festival_state} fs2
          ON fs2.field_festival_state_target_id = fs1.field_festival_state_target_id
          AND fs2.bundle = 'festival'
        WHERE es.entity_id = :id
        LIMIT 1
      ";


  $result = db_query($sql, array(':id' => $event_nid));
  $nid = $result->fetchField();

  // Fallback to event grapher to avoid errors accessing object
  if (empty($nid)) {
    $nid = $event_nid;
  }

  return new VirginEntityGrapher('node', node_load($nid));
}
