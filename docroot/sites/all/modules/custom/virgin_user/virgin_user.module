<?php
/**
 * @file
 * Code for the Virgin User feature.
 */

include_once 'virgin_user.features.inc';

/**
 * The minimum age a user can have to register to Virgin Sport
 */
define('VIRGIN_USER_MIN_AGE', 13);

/**
 * The minimum password length required for Virgin Sport
 */
define('VIRGIN_USER_MIN_PASS_LENGTH', 8);

/**
 * The name of the user data property that stores the timestamp with
 * the last successful data pull from SugarCRM.
 */
define('VIRGIN_USER_DATA_LAST_PULL', 'virgin_user_last_pull');

/**
 * The number of seconds to wait before checking the user's ticket
 * information is up to date and that no ticket placeholders exist.
 */
define('VIRGIN_USER_TICKET_SYNC_PERIOD', 900); // 60 * 15

/**
 * The name of the cookie that holds the basket's region hostname
 */
define('VIRGIN_USER_BASKET_COOKIE', 'vs_basket_region_hostname');

/**
 * The name of the cookie that hosts attendly session ID
 */
define('VIRGIN_USER_ATTENDLY_SESSION_COOKIE', 'attendly-session');

/**
 * The name of the cookie that carries attendly security token value
 */
define('VIRGIN_USER_ATTENDLY_TOKEN_COOKIE', 'attendly-token');

/**
 * Implements hook_ctools_plugin_directory().
 */
function virgin_user_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('panels', 'panelizer', 'ctools', 'page_manager'))) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function virgin_user_theme($existing, $type, $theme, $path) {
  $default = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme'
  );

  return array(
    'virgin_user__ct__user_tickets' => array(
      'variables' => array('data'),
      'template' => 'virgin-user__ct__user_tickets',
    ) + $default,
    'virgin_user__ticket' => array(
      'template' => 'virgin-user__ticket',
      'variables' => array(
        'ticket' => '',
      )
    ) + $default,
    'virgin_user__edit' => array(
      'template'  => 'virgin-user--edit',
      'variables' => array('profile_form')
    ) + $default,
  );
}

/**
 * Implements hook_admin_paths_alter().
 */
function virgin_user_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
}

/**
 * Implements hook_menu().
 */
function virgin_user_menu() {
  $items = array();

  $items['basket/ticket/%/%'] = array(
    'title' => 'Modify Ticket',
    'page callback' => 'virgin_user_page_basket_ticket_action',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/claim/%'] = array(
    'title' => 'Claim Ticket',
    'page callback' => 'virgin_user_page_basket_claim',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/confirm-claim/%'] = array(
    'title' => 'Confirm Ticket Claim',
    'page callback' => 'virgin_user_page_basket_confirm_claim',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/authenticate'] = array(
    'title' => 'Authenticate Basket',
    'page callback' => 'virgin_user_page_basket_authenticate',
    'access callback' => TRUE,
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/festival-list'] = array(
    'title' => 'Festival List',
    'page callback' => 'virgin_user_page_basket_festival_list',
    'access callback' => TRUE,
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/checkout-finished'] = array(
    'title' => 'Checkout Finished',
    'page callback' => 'virgin_user_page_basket_checkout_finished',
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/post-checkout'] = array(
    'title' => 'Post Checkout',
    'page callback' => 'virgin_user_page_basket_post_checkout',
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function virgin_user_menu_alter(&$items) {

  // Override the user edit page callback to ensure the use profile is synced
  // with SugarCRM before the form is rendered.
  $items['user/%user/edit']['page callback'] = 'virgin_user_page_user_edit';
  $items['user/%user/edit']['file'] = 'virgin_user.pages.inc';
  $items['user/%user/edit']['file path'] = drupal_get_path('module', 'virgin_user');

  // Restrict certain user administration routes to website administrators.
  $admin_routes = array(
    'user/%user/hybridauth',
    'user/%user/hybridauth/delete'
  );

  foreach ($admin_routes as $route) {
    $items[$route]['access callback'] = 'user_access';
    $items[$route]['access arguments'] = array('administer site configuration');
  }
}

/**
 * Implements hook_username_alter().
 */
function virgin_user_username_alter(&$name, $account) {

  // Set the visible username from the user's given name and surname.
  if ($account->uid) {
    $account_wrapper = entity_metadata_wrapper('user', $account);
    $given_name = $account_wrapper->field_first_name->value();
    $surname = $account_wrapper->field_last_name->value();
    $full_name = trim($given_name . ' ' . $surname);

    // In some cases, such as the user administration view, the account object
    // might not be fully loaded. In those cases, fallback to the username with
    // the user ID.
    if (empty($full_name)) {
      $name = '(' . $account->uid . ') ' . $name;
    }
    else {
      $name = $full_name;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function virgin_user_form_user_register_form_alter(&$form, &$form_state, $form_id) {

  // Add an e-mail confirm input
  $form['account']['mail_confirm'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm E-mail'),
    '#required' => TRUE
  );

  // Ensure the email fields ordering
  $form['account']['mail']['#weight'] = -2;
  $form['account']['mail_confirm']['#weight'] = -1;

  // Ensure the password follows certain criteria
  $form['account']['pass']['#element_validate'][] = 'virgin_user_password_validate';

  // Add custom validation callback
  $form['#validate'][] = 'virgin_user_form_user_register_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form.
 */
function virgin_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  // The user cannot change his SugarCRM ID as this is entirely
  // managed automatically by the system.
  $form['field_sugar_id']['#access'] = FALSE;

  // The user cannot modify these fields after registration, as
  // such remove them from the profile form.
  $form['field_first_name']['#access'] = FALSE;
  $form['field_last_name']['#access'] = FALSE;
  $form['field_gender']['#access'] = FALSE;
  $form['field_birth_date']['#access'] = FALSE;

  // The other medical conditions field is only visible when
  // the user has picked the 'Other' option in the medical
  // conditions field.
  $form['field_medical_conditions_other']['#states'] = array(
    'visible' => array(
      ':input[name="field_medical_conditions[und]"]' => array('value' => 'Other')
    )
  );

  // If any medical information has been submitted, then
  // the user must agree to share his medical info.
  $form['field_agree_share_medical_info']['#states'] = array(
    'required' => array(
      ':input[name="field_medical_conditions[und]"]' => array('!value' => "_none"),
      ':input[name="field_medical_conditions_other[und]"]' => array('filled' => TRUE),
      ':input[name="field_medications[und]"]' => array('filled' => TRUE),
      ':input[name="field_allergies[und]"]' => array('filled' => TRUE),
    )
  );

  // Add custom validation callback
  $form['#validate'][] = 'virgin_user_form_user_profile_form_validate';
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 *
 * Maps the user profile information from the social network at registration
 * time to the fields in the user's Drupal profile.
 */
function virgin_user_hybridauth_userinfo_alter(&$userinfo, $data) {

  // If the authentication is not being done via Facebook, bail out.
  if (empty($data['provider']) || $data['provider'] != 'Facebook') {
    return;
  }

  $defaults = array(
    'firstName' => null,
    'lastName' => null,
    'gender' => null,
    'birthDay' => null,
    'birthMonth' => null,
    'birthYear' => null,
    'phone' => null,
    'city' => null,
    'country' => null,
    'address' => null,
    'region' => null,
    'zip' => null,
  );

  $data = $data + $defaults;

  $birth_date = strtotime($data['birthYear'] . '/' . $data['birthMonth'] . '/' . $data['birthDay']);

  $userinfo['field_address_city'][LANGUAGE_NONE][0]['value'] = $data['city'];
  $userinfo['field_address_country'][LANGUAGE_NONE][0]['value'] = $data['country'];
  $userinfo['field_address_line_1'][LANGUAGE_NONE][0]['value'] = $data['address'];
  $userinfo['field_address_postcode'][LANGUAGE_NONE][0]['value'] = $data['zip'];
  $userinfo['field_address_state'][LANGUAGE_NONE][0]['value'] = $data['region'];
  $userinfo['field_contact_number'][LANGUAGE_NONE][0]['value'] = $data['phone'];
  $userinfo['field_first_name'][LANGUAGE_NONE][0]['value'] = $data['firstName'];
  $userinfo['field_last_name'][LANGUAGE_NONE][0]['value'] = $data['lastName'];
  $userinfo['field_gender'][LANGUAGE_NONE][0]['value'] = $data['gender'];
  $userinfo['field_birth_date'][LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', $birth_date);
}

/**
 * Implements hook_observer_info().
 */
function virgin_user_observer_info() {
  return array(
    new VirginUserSugarPushListener(),
    new VirginUserSugarPullListener(),
  );
}

/**
 * Implements hook_entity_presave().
 */
function virgin_user_entity_presave($entity, $type) {
  if ($type == 'user') {
    virgin_user_observer_notify($entity);
  }
}

/**
 * Implements hook_user_login().
 */
function virgin_user_user_login(&$edit, $account) {
  $params = $_GET;

  // If the user is authenticating against Facebook via hybrid auth
  // we need to capture the destination parameter and parse it for
  // possible basket actions.
  if ($_GET['q'] == 'hybridauth/window/Facebook' && !empty($_GET['destination'])) {
    $query_str = parse_url($_GET['destination'], PHP_URL_QUERY);
    parse_str($query_str, $params);
  }

  // Helper function to extract a param with defaults
  $param = function ($name, $default = '') use ($params) {
    return empty($params[$name]) ? $default : $params[$name];
  };

  // If there's a basket action, redirect the user to the relevant
  // basket operation routes for further processing. The option to
  // override the destination parameter in the super global GET is
  // due to the fact that hybridauth sets the destination parameter
  // as part of it's execution and that overrides any changes we
  // make to the edit redirect value.
  switch ($param('basket-action')) {
    case 'claim':
      $_GET['destination'] = 'basket/confirm-claim/' . $param('rego', 'invalid-rego');
      break;

    case 'authenticate':
      $_GET['destination'] = 'basket/authenticate';
      break;
  }
}

// Preprocess functions
// ----------------------------------------------------------------------------

/**
 * Implements hook_preprocess_HOOK() for user profile theme.
 */
function virgin_user_preprocess_user_profile(&$vars) {
  // Create ctools context for current user
  ctools_include('content');
  ctools_include('context');
  $user_context = ctools_context_create('user', $vars['user']);
  $context = array('user_context' => $user_context);

  // Get user tickets
  $vars['upcoming_festivals'] = ctools_content_render('user_tickets', 'user_tickets', array('upcoming' => 1), array(), array(), $context);
  $vars['past_festivals'] = ctools_content_render('user_tickets', 'user_tickets', array(), array(), array(), $context);
}

// Helpers
// ----------------------------------------------------------------------------

/**
 * Notify observer for user events
 *
 * @param $account
 * @throws \VirginException
 */
function virgin_user_observer_notify($account) {

  // Do not trigger observer events for the admin user, given that the admin
  // user should neither be synced to SugarCRM or be conditioned by other
  // effects that apply to normal user accounts.
  if ($account->uid === "1") {
    return;
  }

  // Based on account type we trigger create or update events
  if ($account->is_new) {
    try {
      observer_notify(VirginUserEvents::USER_CREATED, $account);
    } catch (\Exception $e) {
      throw new VirginException('SugarCRM synchronization problem.', t('Oops, sorry we cannot register you at this moment, please try again later'), url('user'));
    }
  } else {
    try {
      observer_notify(VirginUserEvents::USER_UPDATED, $account);
    } catch (\Exception $e) {
      throw new VirginException('SugarCRM synchronization problem.', t('Oops, sorry we cannot update your profile at this moment, please try again later'), url('user'));
    }
  }
}

/**
 * Validation callback for the user_register_form form.
 *
 * @see virgin_user_form_user_register_form_alter()
 */
function virgin_user_form_user_register_form_validate(&$form, &$form_state) {

  // Users must be at least of a certain age to register to Virgin Sport
  $birth_date = virgin_form_value('field_birth_date', $form_state);

  if (!$birth_date || (date('Y', time()) - date('Y', strtotime($birth_date))) < VIRGIN_USER_MIN_AGE) {
    form_set_error('field_birth_date', t("You must have at least @min years of age to have a Virgin Sport account.", array('@min' => VIRGIN_USER_MIN_AGE)));
  }

  // Confirm that the user entered e-mails match
  $mail = virgin_form_value('mail', $form_state);
  $mail_confirm = virgin_form_value('mail_confirm', $form_state);

  if ($mail != $mail_confirm) {
    form_set_error('mail', t("The e-mails you entered do not match"));
  }

  // Check password fits the requirements
  $pass = virgin_form_value('pass', $form_state);

  if (!preg_match("#[0-9]+#", $pass)) {
    form_set_error('pass', t("The password must have at least one number"));
  }
  if (strlen($pass) < VIRGIN_USER_MIN_PASS_LENGTH) {
    form_set_error('pass', t("The password must have at least @min characters", array('@min' => VIRGIN_USER_MIN_PASS_LENGTH)));
  }
}

/**
 * Validation callback for the user_profile_form form.
 *
 * @see virgin_user_form_user_profile_form_alter()
 */
function virgin_user_form_user_profile_form_validate(&$form, &$form_state) {

  // Validate the user cannot save profile form with medical info if he does
  // not agree to share that information.
  $has_medical_conditions = false;

  $medical_fields = array(
    'field_medical_conditions',
    'field_medical_conditions_other',
    'field_medications',
    'field_allergies'
  );

  // If any field is filled, then the user has medical conditions
  foreach ($medical_fields as $field) {
    if (virgin_form_value($field, $form_state)) {
      $has_medical_conditions = TRUE;
      break;
    }
  }

  $agree_share = (bool) virgin_form_value('field_agree_share_medical_info', $form_state);

  if (!$agree_share && $has_medical_conditions) {
    form_set_error('field_agree_share_medical_info', t('You must agree to share your medical information if you fill any of the medical fields.'));
  }
}

/**
 * Bind the current user attendly session with his virgin sport account
 *
 * @return bool
 *  TRUE the session was successfuly bound, FALSE otherwise
 */
function virgin_user_bind_attendly_checkout_session() {
  global $user;

  // Attempt to get the user virgin sport ID, and if it fails, bail out now
  $wrapper = entity_metadata_wrapper('user', $user);
  $sugar_id = $wrapper->field_sugar_id->value();

  if (empty($sugar_id)) {
    return FALSE;
  }

  // Helper function to build the attendly cookies with the environment
  // variable as a suffix if set.
  $cookie_name = function ($name) {
    $env = variable_get(VIRGIN_VAR_ATTENDLY_ENV);
    return empty($env) ? $name : $name . '-' . $env;
  };

  // Fetch the attendly session value
  $attendly_session = virgin_cookie_get($cookie_name(VIRGIN_USER_ATTENDLY_SESSION_COOKIE));

  // If the user does not have an attendly session, it's not possible to bind
  // him with attendly's system.
  if (empty($attendly_session)) {
    return FALSE;
  }

  // Finally, attempt to bind with Attendly and if successful store the token
  // in a cookie that attendly can read.
  try {
    $token = virgin_attendly_client()->bindCheckoutSession($attendly_session, $sugar_id);
    virgin_cookie_set($cookie_name(VIRGIN_USER_ATTENDLY_TOKEN_COOKIE), $token);
    return TRUE;

  } catch (\Exception $e) {
    watchdog(
      'virgin_user',
      'Could not bind user attendly session (@sess) with virgin sport user id',
      array('@sess' => $attendly_session)
    );
    return FALSE;
  }
}
