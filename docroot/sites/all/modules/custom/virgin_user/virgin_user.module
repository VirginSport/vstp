<?php
/**
 * @file
 * Code for the Virgin User feature.
 */

include_once 'virgin_user.features.inc';

/**
 * The minimum age a user can have to register to Virgin Sport
 */
define('VIRGIN_USER_MIN_AGE', 13);

/**
 * The minimum password length required for Virgin Sport
 */
define('VIRGIN_USER_MIN_PASS_LENGTH', 8);

/**
 * The name of the user data property that stores the timestamp with
 * the last attempted data pull from SugarCRM.
 */
define('VIRGIN_USER_DATA_LAST_ATTEMPTED_PULL', 'virgin_user_last_attempted_pull');

/**
 * The name of the user data property that stores the timestamp with
 * the last successful data pull from SugarCRM.
 */
define('VIRGIN_USER_DATA_LAST_SUCCESSFUL_PULL', 'virgin_user_last_successful_pull');

/**
 * The number of seconds to wait before checking the user's ticket
 * information is up to date and that no ticket placeholders exist.
 */
define('VIRGIN_USER_TICKET_SYNC_PERIOD', 60);

/**
 * The name of the cookie that holds the basket's region hostname
 */
define('VIRGIN_USER_BASKET_COOKIE', 'vs_basket_region_hostname');

/**
 * The name of the cookie that hosts attendly session ID
 */
define('VIRGIN_USER_ATTENDLY_SESSION_COOKIE', 'attendly-session');

/**
 * The name of the cookie that carries attendly security token value
 */
define('VIRGIN_USER_ATTENDLY_TOKEN_COOKIE', 'attendly-token');

/**
 * The name of the cookie that carries the number of items in attendly basket
 */
define('VIRGIN_USER_ATTENDLY_ITEMS_COOKIE', 'attendly-items');

/**
 * Implements hook_init().
 */
function virgin_user_init() {
  // Redirect user to user/login when accessing to user if he's not registered
  if (current_path() == 'user' && user_is_anonymous()) {
    drupal_goto('user/login');
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function virgin_user_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('panels', 'panelizer', 'ctools', 'page_manager'))) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function virgin_user_theme($existing, $type, $theme, $path) {
  $default = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme'
  );

  return array(
    'virgin_user__ct__user_tickets' => array(
      'variables' => array('data'),
      'template' => 'virgin-user__ct__user_tickets',
    ) + $default,
    'virgin_user__ticket' => array(
      'variables' => array('ticket', 'ticket_type', 'event'),
      'template' => 'virgin-user__ticket',
    ) + $default,
    'virgin_user__claim_ticket' => array(
      'template' => 'virgin_user__claim_ticket',
      'variables' => array(
        'ticket' => '',
        'logged_name' => '',
        'recipient' => '',
        'purchaser' => ''
      )
    ) + $default,
    'virgin_user__claim_ticket_page' => array(
      'template' => 'virgin_user__claim_ticket_page',
      'variables' => array(
        'ticket' => '',
      )
    ) + $default,
    'virgin_user__edit' => array(
      'template'  => 'virgin-user--edit',
      'variables' => array(
        'profile_form' => '',
      )
    ) + $default,
    'virgin_user__login' => array(
      'template' => 'virgin-user__login',
      'variables' => array(
        'login_form' => '',
        'hybridauth_widget' => '',
      )
    ) + $default,
    'virgin_user__register' => array(
      'template' => 'virgin-user__register',
      'variables' => array(
        'register_form' => '',
        'hybridauth_widget' => '',
      )
    ) + $default,
    'virgin_user__password' => array(
        'template' => 'virgin-user__password',
        'variables' => array(
          'form' => '',
        )
      ) + $default,
    'virgin_user__contact_form' => array(
      'template' => 'virgin-user--contact-form',
      'variables' => array(
        'vars' => array(),
      )
    ) + $default,
    'virgin_user__register_interest_form' => array(
      'template' => 'virgin-user--register-interest-form',
      'variables' => array(
        'vars' => array(),
      )
    ) + $default
  );
}

/**
 * Implements hook_admin_paths_alter().
 */
function virgin_user_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
}

/**
 * Implements hook_menu().
 */
function virgin_user_menu() {
  $items = array();

  $items['basket/ticket/%/%'] = array(
    'title' => 'Modify Ticket',
    'page callback' => 'virgin_user_page_basket_ticket_action',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/claim/%'] = array(
    'title' => 'Claim Ticket',
    'page callback' => 'virgin_user_page_basket_claim',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/confirm-claim/%'] = array(
    'title' => 'Confirm Ticket Claim',
    'page callback' => 'virgin_user_page_basket_confirm_claim',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/authenticate'] = array(
    'title' => 'Authenticate Basket',
    'page callback' => 'virgin_user_page_basket_authenticate',
    'access callback' => TRUE,
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/festival-list'] = array(
    'title' => 'Festival List',
    'page callback' => 'virgin_user_page_basket_festival_list',
    'access callback' => TRUE,
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/checkout-finished'] = array(
    'title' => 'Checkout Finished',
    'page callback' => 'virgin_user_page_basket_checkout_finished',
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['basket/post-checkout'] = array(
    'title' => 'Post Checkout',
    'page callback' => 'virgin_user_page_basket_post_checkout',
    'access callback' => 'user_is_logged_in',
    'menu type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['ajax/contact-form'] = array(
    'title' => 'Form',
    'page callback' => 'virgin_user_page_ajax_form',
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['ajax/contact-form/post'] = array(
    'title' => 'Form',
    'page callback' => 'virgin_user_page_ajax_form_post',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  $items['user/results/%virgin_user_ticket'] = array(
    'title' => 'Results',
    'page callback' => 'virgin_user_page_results',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'virgin_user.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function virgin_user_menu_alter(&$items) {
  $file_path = drupal_get_path('module', 'virgin_user');
  $file = 'virgin_user.pages.inc';

  // Override the user edit page callback to ensure the use profile is synced
  // with SugarCRM before the form is rendered.
  $items['user/%user/edit']['page callback'] = 'virgin_user_page_user_edit';
  $items['user/%user/edit']['file'] = $file;
  $items['user/%user/edit']['file path'] = $file_path;

  // Only allow authenticated user to access user page
  $items['user']['access callback'] = 'user_is_logged_in';

  // Override user login page
  $items['user/login']['page callback'] = 'virgin_user_page_user_login';
  $items['user/login']['file'] = $file;
  $items['user/login']['file path'] = $file_path;

  // Override user register page
  $items['user/register']['page callback'] = 'virgin_user_page_user_register';
  $items['user/register']['file'] = $file;
  $items['user/register']['file path'] = $file_path;

  // Override password recover page
  $items['user/password']['page callback'] = 'virgin_user_page_user_password';
  $items['user/password']['file'] = $file;
  $items['user/password']['file path'] = $file_path;

  // Restrict certain user administration routes to website administrators.
  $admin_routes = array(
    'user/%user/hybridauth',
    'user/%user/hybridauth/delete'
  );

  foreach ($admin_routes as $route) {
    $items[$route]['access callback'] = 'user_access';
    $items[$route]['access arguments'] = array('administer site configuration');
  }
}

/**
 * Implements hook_username_alter().
 */
function virgin_user_username_alter(&$name, $account) {

  // Set the visible username from the user's given name and surname.
  if ($account->uid) {
    $account_wrapper = entity_metadata_wrapper('user', $account);
    $given_name = $account_wrapper->field_first_name->value();
    $surname = $account_wrapper->field_last_name->value();
    $full_name = trim($given_name . ' ' . $surname);

    // In some cases, such as the user administration view, the account object
    // might not be fully loaded. In those cases, fallback to the username with
    // the user ID.
    if (empty($full_name)) {
      $name = '(' . $account->uid . ') ' . $name;
    }
    else {
      $name = $full_name;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function virgin_user_form_user_login_alter(&$form, &$form_state, $form_id) {
  // Add custom validation callback
  $form['#validate'][] = 'virgin_user_form_user_login_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for user_pass.
 */
function virgin_user_form_user_pass_alter(&$form, &$form_state, $form_id) {
  // Add custom validation callback
  $form['#validate'][] = 'virgin_user_form_user_pass_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function virgin_user_form_user_register_form_alter(&$form, &$form_state, $form_id) {

  // Add an e-mail confirm input
  $form['account']['mail_confirm'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm E-mail'),
    '#required' => TRUE
  );

  // This fields are not available on register page
  $form['field_address_city']['#access'] = FALSE;
  $form['field_address_country']['#access'] = FALSE;
  $form['field_address_line_1']['#access'] = FALSE;
  $form['field_address_postcode']['#access'] = FALSE;
  $form['field_contact_number']['#access'] = FALSE;

  // Ensure the email fields ordering
  $form['account']['mail']['#weight'] = -2;
  $form['account']['mail_confirm']['#weight'] = -1;

  // Ensure the password follows certain criteria
  $form['account']['current_pass']['#element_validate'][] = 'virgin_user_password_validate';

  // Add custom validation callback
  $form['#validate'][] = 'virgin_user_form_user_register_form_validate';

  // add custom submit callback
  $form['#submit'][] = 'virgin_user_form_user_register_form_submit';

  // Replace list field _none option by empty value an remove select hyphens
  $list_fields = array(
    'field_gender',
    'field_address_country'
  );

  foreach ($list_fields as $list_field) {
    unset($form[$list_field][LANGUAGE_NONE]['#options']['_none']);
    $options = $form[$list_field][LANGUAGE_NONE]['#options'];
    $form[$list_field][LANGUAGE_NONE]['#options'] = array('' => t('Select a value')) + $options;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form.
 */
function virgin_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  // The user cannot change his SugarCRM ID as this is entirely
  // managed automatically by the system.
  $form['field_sugar_id']['#access'] = FALSE;

  // The user cannot modify these fields after registration, as
  // such remove them from the profile form.
  $form['field_first_name']['#access'] = FALSE;
  $form['field_last_name']['#access'] = FALSE;
  $form['field_gender']['#access'] = FALSE;
  $form['field_birth_date']['#access'] = FALSE;

  // The other medical conditions field is only visible when
  // the user has picked the 'Other' option in the medical
  // conditions field.
  $form['field_medical_conditions_other']['#states'] = array(
    'visible' => array(
      ':input[name="field_medical_conditions[und]"]' => array('value' => 'Other')
    )
  );

  // If any medical information has been submitted, then
  // the user must agree to share his medical info.
  $form['field_agree_share_medical_info']['#states'] = array(
    'required' => array(
      ':input[name="field_medical_conditions[und]"]' => array('!value' => "_none"),
      ':input[name="field_medical_conditions_other[und]"]' => array('filled' => TRUE),
      ':input[name="field_medications[und]"]' => array('filled' => TRUE),
      ':input[name="field_allergies[und]"]' => array('filled' => TRUE),
    )
  );

  // Ensure the password follows certain criteria
  $form['account']['current_pass']['#element_validate'][] = 'virgin_user_password_validate';

  // Add custom validation callback
  $form['#validate'][] = 'virgin_user_form_user_profile_form_validate';

  // Allow email update without password required
  unset($form['account']['current_pass_required_values']['#value']['mail']);

  // Replace list field _none option by empty value an remove select hyphens
  $list_fields = array(
    'field_region',
    'field_gender',
    'field_address_country'
  );

  foreach ($list_fields as $list_field) {
    unset($form[$list_field][LANGUAGE_NONE]['#options']['_none']);
    $options = $form[$list_field][LANGUAGE_NONE]['#options'];
    $form[$list_field][LANGUAGE_NONE]['#options'] = array('' => t('Select a value')) + $options;
  }
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 *
 * Maps the user profile information from the social network at registration
 * time to the fields in the user's Drupal profile.
 */
function virgin_user_hybridauth_userinfo_alter(&$userinfo, $data) {

  // If the authentication is not being done via Facebook, bail out.
  if (empty($data['provider']) || $data['provider'] != 'Facebook') {
    return;
  }

  $defaults = array(
    'firstName' => null,
    'lastName' => null,
    'gender' => null,
    'birthDay' => null,
    'birthMonth' => null,
    'birthYear' => null,
    'phone' => null,
    'city' => null,
    'country' => null,
    'address' => null,
    'region' => null,
    'zip' => null,
  );

  $data = $data + $defaults;

  $birth_date = strtotime($data['birthYear'] . '/' . $data['birthMonth'] . '/' . $data['birthDay']);

  // Attempt to fetch the country from one of the options in the country list
  $info = field_info_field('field_address_country');
  $keys_countries = $info['settings']['allowed_values'];
  $countries_keys = array_flip($keys_countries);
  $country = isset($countries_keys[$data['country']]) ? $countries_keys[$data['country']] : '';

  // Map the hybridauth values to the user fields
  $userinfo['field_address_city'][LANGUAGE_NONE][0]['value'] = $data['city'];
  $userinfo['field_address_country'][LANGUAGE_NONE][0]['value'] = $country;
  $userinfo['field_address_line_1'][LANGUAGE_NONE][0]['value'] = $data['address'];
  $userinfo['field_address_postcode'][LANGUAGE_NONE][0]['value'] = $data['zip'];
  $userinfo['field_address_state'][LANGUAGE_NONE][0]['value'] = $data['region'];
  $userinfo['field_contact_number'][LANGUAGE_NONE][0]['value'] = $data['phone'];
  $userinfo['field_first_name'][LANGUAGE_NONE][0]['value'] = $data['firstName'];
  $userinfo['field_last_name'][LANGUAGE_NONE][0]['value'] = $data['lastName'];
  $userinfo['field_gender'][LANGUAGE_NONE][0]['value'] = $data['gender'];
  $userinfo['field_birth_date'][LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', $birth_date);
}

/**
 * Validation callback for password field
 */
function virgin_user_password_validate($element, $form_state) {
  // Check password fits the requirements
  $pass = virgin_form_value('pass', $form_state);

  // To prevent validation if password was not provided
  // The required validation is made outside this validation context
  if (empty($pass)) {
    return;
  }

  // Make sure password have at least one number
  if (!preg_match("#[0-9]+#", $pass)) {
    form_set_error('pass', t("The password must have at least one number"));
  }

  if (strlen($pass) < VIRGIN_USER_MIN_PASS_LENGTH) {
    form_set_error('pass', t("The password must have at least @min characters", array('@min' => VIRGIN_USER_MIN_PASS_LENGTH)));
  }
}

/**
 * Implements hook_observer_info().
 */
function virgin_user_observer_info() {
  return array(
    new VirginUserSugarPushListener(),
    new VirginUserSugarPullListener(),
  );
}

/**
 * Implements hook_entity_presave().
 */
function virgin_user_entity_presave($entity, $type) {
  if ($type == 'user') {
    virgin_user_observer_notify($entity);
  }
}

/**
 * Implements hook_user_login().
 */
function virgin_user_user_login(&$edit, $account) {
  $params = $_GET;

  // Mark this request as a sign in success
  virgin_gtm()->addEvent('SignInSuccess');

  // If the user is authenticating against Facebook via hybrid auth
  // we need to capture the destination parameter and parse it for
  // possible basket actions.
  if ($_GET['q'] == 'hybridauth/window/Facebook' && !empty($_GET['destination'])) {
    $query_str = parse_url($_GET['destination'], PHP_URL_QUERY);
    parse_str($query_str, $params);
  }

  // Helper function to extract a param with defaults
  $param = function ($name, $default = '') use ($params) {
    return empty($params[$name]) ? $default : $params[$name];
  };

  // If there's a basket action, redirect the user to the relevant
  // basket operation routes for further processing. The option to
  // override the destination parameter in the super global GET is
  // due to the fact that hybridauth sets the destination parameter
  // as part of it's execution and that overrides any changes we
  // make to the edit redirect value.
  switch ($param('basket-action')) {
    case 'claim':
      $_GET['destination'] = 'basket/confirm-claim/' . $param('rego', 'invalid-rego');
      break;

    case 'authenticate':
      $_GET['destination'] = 'basket/authenticate';
      break;
  }

  // If no basket action is set, then check if the user should be redirected
  // to his prefered region.
  if (empty($param('basket-action'))) {

    // Fetch the value of the cookie that holds the number of items in
    // the basket.
    $attendly_env = variable_get(VIRGIN_VAR_ATTENDLY_ENV);
    $basket_cookie = VIRGIN_USER_ATTENDLY_ITEMS_COOKIE . ($attendly_env ? '-' . $attendly_env : '');
    $basket_items = (int) virgin_cookie_get($basket_cookie);

    // If the user does not have items in his basket, redirect him to his
    // preferred region immediatly.
    if (!$basket_items) {

      // Ensure the basket hostname cookie is set to his preferred region
      // before the user is redirected to his region.
      $prefered_hostname = virgin_region_user_hostname();
      virgin_cookie_set(VIRGIN_USER_BASKET_COOKIE, $prefered_hostname);

      // And finally redirect him to his preferred region
      $redirect = empty($edit['redirect']) ? NULL : $edit['redirect'];
      $destination = empty($_GET['destination']) ? $redirect : $_GET['destination'];

      virgin_region_user_redirect($account->uid, virgin_region_current(), $destination);
      return;
    }

    // If the user however has items in his basket, check if he's currently in
    // his prefered region, and if not, add a query parameter to the URL he's
    // being sent to, so that via Javascript a prompt can be shown asking him
    // if he wants to switch region.
    if ($basket_items) {
      $current_region = virgin_region_current();
      $prefered_hostname = virgin_region_user_hostname();

      // Ensure the basket hostname cookie is set to the current region
      virgin_cookie_set(VIRGIN_USER_BASKET_COOKIE, $current_region['hostname']);

      // Add the required query parameter to open the regional switch modal
      if ($current_region['hostname'] != $prefered_hostname) {
        $destination = empty($_GET['destination']) ? $edit['redirect'] : $_GET['destination'];
        $params = parse_url($destination, PHP_URL_QUERY);

        $_GET['destination'] = sprintf('%s%sregion-change=%s', $destination, ($params ? '&' : '?'), $prefered_hostname);
      }
    }
  }
}

/**
 * Implements hook_user_logout().
 */
function virgin_user_user_logout($account) {

  // Remove all cookies the user has on his browser for region selection
  // and attendly basket token and session integration.
  $attendly_env = variable_get(VIRGIN_VAR_ATTENDLY_ENV);
  $attendly_suffix = empty($attendly_env) ? '' : '-' . $attendly_env;

  virgin_cookie_unset(VIRGIN_USER_BASKET_COOKIE);
  virgin_cookie_unset(VIRGIN_USER_ATTENDLY_SESSION_COOKIE . $attendly_suffix);
  virgin_cookie_unset(VIRGIN_USER_ATTENDLY_ITEMS_COOKIE . $attendly_suffix);
  virgin_cookie_unset(VIRGIN_USER_ATTENDLY_TOKEN_COOKIE . $attendly_suffix);
}

// Preprocess functions
// ----------------------------------------------------------------------------

/**
 * Implements hook_preprocess_HOOK() for user profile theme.
 */
function virgin_user_preprocess_user_profile(&$vars) {
  // Create ctools context for current user
  ctools_include('content');
  ctools_include('context');
  $user_context = ctools_context_create('user', $vars['user']);
  $context = array('user_context' => $user_context);

  // Get user tickets
  $vars['upcoming_festivals'] = ctools_content_render('user_tickets', 'user_tickets', array('upcoming' => 1), array(), array(), $context);
  $vars['past_festivals'] = ctools_content_render('user_tickets', 'user_tickets', array(), array(), array(), $context);
}

// Helpers
// ----------------------------------------------------------------------------

/**
 * Notify observer for user events
 *
 * @param $account
 * @throws \VirginException
 */
function virgin_user_observer_notify($account) {

  // Do not trigger observer events for the admin user, given that the admin
  // user should neither be synced to SugarCRM or be conditioned by other
  // effects that apply to normal user accounts.
  if ($account->uid === "1") {
    return;
  }

  // Based on account type we trigger create or update events
  if ($account->is_new) {
    try {
      observer_notify(VirginUserEvents::USER_CREATED, $account);
    } catch (\Exception $e) {
      throw new VirginException('SugarCRM synchronization problem.', t('Oops, sorry we cannot register you at this moment, please try again later'), url('user'));
    }
  } else {
    try {
      observer_notify(VirginUserEvents::USER_UPDATED, $account);
    } catch (\Exception $e) {
      $previous = $e->getPrevious();

      // If the user is trying to use an e-mail address that's already in use by
      // SugarCRM, alert the user of an error and ask him to contact support.
      if ($previous instanceof \Guzzle\Http\Exception\ClientErrorResponseException) {
        $data = $previous->getResponse()->json();

        if (
          isset($data['error']) &&
          $data['error'] == 'invalid_parameter' &&
          strpos($data['error_message'], 'contact with email address') !== FALSE
        ) {
          throw new VirginException('SugarCRM synchronization problem.', t('The e-mail address @email is already registered, please enter a unique email address or contact hello@virginsport.com to resolve.', array('@email' => $account->mail)), url('user'));
        }
      }

      // Otherwise fallback to a generic try again later exception
      throw new VirginException('SugarCRM synchronization problem.', t('Oops, sorry we cannot update your profile at this moment, please try again later'), url('user'));
    }
  }
}

/**
 * Validation callback for the user_login form.
 *
 * @see virgin_user_form_user_login_alter()
 */
function virgin_user_form_user_login_validate(&$form, &$form_state) {
  // Add sign in attempt event
  virgin_gtm()->addEvent('SignInAttempt');
}

/**
 * Validation callback for the user_pass form.
 *
 * @see virgin_user_form_user_pass_alter()
 */
function virgin_user_form_user_pass_validate(&$form, &$form_state) {
  $name = trim($form_state['values']['name']);

  if (form_get_errors()) {
    // Push error to gtm
    virgin_gtm()->addError(sprintf('Sorry, %s is not recognized as a user name or an e-mail address.', $name));
  }
}

/**
 * Validation callback for the user_register_form form.
 *
 * @see virgin_user_form_user_register_form_alter()
 */
function virgin_user_form_user_register_form_validate(&$form, &$form_state) {
  // If form get errors bail out
  if (form_get_errors()) {
    return;
  }

  // Users must be at least of a certain age to register to Virgin Sport
  $birth_date = strtotime(virgin_form_value('field_birth_date', $form_state));

  if ($birth_date === FALSE || (date('Y', time()) - date('Y', $birth_date)) < VIRGIN_USER_MIN_AGE) {
    form_set_error('field_birth_date', t("We love your enthusiasm, but you must be 13 to create an account."));
  }

  // Confirm that the user entered e-mails match
  $mail = virgin_form_value('mail', $form_state);
  $mail_confirm = virgin_form_value('mail_confirm', $form_state);

  if ($mail != $mail_confirm) {
    form_set_error('mail', t("The e-mails you entered do not match"));
  }

  // Add sign up attempt event
  virgin_gtm()->addEvent('SignUpAttempt');
}


/**
 * Submit callback for the user_register_form form.
 *
 * @see virgin_user_form_user_register_form_alter()
 */
function virgin_user_form_user_register_form_submit(&$form, &$form_state) {
  // Add sign up success event
  virgin_gtm()->addEvent('SignUpSuccess');
}

/**
 * Validation callback for the user_profile_form form.
 *
 * @see virgin_user_form_user_profile_form_alter()
 */
function virgin_user_form_user_profile_form_validate(&$form, &$form_state) {

  // Validate the user cannot save profile form with medical info if he does
  // not agree to share that information.
  $has_medical_conditions = false;

  $medical_fields = array(
    'field_medical_conditions',
    'field_medical_conditions_other',
    'field_medications',
    'field_allergies'
  );

  // If any field is filled, then the user has medical conditions
  foreach ($medical_fields as $field) {
    if (virgin_form_value($field, $form_state)) {
      $has_medical_conditions = TRUE;
      break;
    }
  }

  $agree_share = (bool) virgin_form_value('field_agree_share_medical_info', $form_state);

  if (!$agree_share && $has_medical_conditions) {
    form_set_error('field_agree_share_medical_info', t('You must agree to share your medical information if you fill any of the medical fields.'));
  }
}

/**
 * Bind the current user attendly session with his virgin sport account
 *
 * @return bool
 *  TRUE the session was successfuly bound, FALSE otherwise
 */
function virgin_user_bind_attendly_checkout_session() {
  global $user;

  // Attempt to get the user virgin sport ID, and if it fails, bail out now
  $wrapper = entity_metadata_wrapper('user', $user);
  $sugar_id = $wrapper->field_sugar_id->value();

  if (empty($sugar_id)) {
    return FALSE;
  }

  // Helper function to build the attendly cookies with the environment
  // variable as a suffix if set.
  $cookie_name = function ($name) {
    $env = variable_get(VIRGIN_VAR_ATTENDLY_ENV);
    return empty($env) ? $name : $name . '-' . $env;
  };

  // Fetch the attendly session value
  $attendly_session = virgin_cookie_get($cookie_name(VIRGIN_USER_ATTENDLY_SESSION_COOKIE));

  // If the user does not have an attendly session, it's not possible to bind
  // him with attendly's system.
  if (empty($attendly_session)) {
    return FALSE;
  }

  // Finally, attempt to bind with Attendly and if successful store the token
  // in a cookie that attendly can read.
  try {
    $token = virgin_attendly_client()->bindCheckoutSession($attendly_session, $sugar_id);
    virgin_cookie_set($cookie_name(VIRGIN_USER_ATTENDLY_TOKEN_COOKIE), $token);
    return TRUE;

  } catch (\Exception $e) {
    watchdog(
      'virgin_user',
      'Could not bind user attendly session (@sess) with virgin sport user id',
      array('@sess' => $attendly_session)
    );
    return FALSE;
  }
}

/**
 * Loads a user ticket object.
 */
function virgin_user_ticket_load($sugar_id) {
  $ticket = db_select('virgin_user_tickets')
    ->fields('virgin_user_tickets')
    ->condition('sugar_id', $sugar_id, '=')
    ->execute()
    ->fetchObject()
  ;

  return empty($ticket) ? FALSE : $ticket;
}

/**
 * Helper function to fetch a ticket from SugarCRM
 *
 * @param string $rego
 *  The ticket rego ID
 * @return array|null
 *  Either the ticket with the given rego or a null if no ticket was found
 * @throws \VirginException
 *  If a communication error happened while calling SugarCRM
 */
function _virgin_user_get_ticket($rego) {
  try {
    $path = sprintf('Virgin/Tickets/with-rego/%s', $rego);
    $ticket = sugarcrm_client()->systemGet($path);
    return empty($ticket['id']) ? NULL : $ticket;

  } catch (\Exception $e) {

    // If the exception is a 404 that either means the ticket does not exist or
    // that it has not yet been processed by SugarCRM. Either way we return
    // NULL and let the caller handle that.
    if (
      $e instanceof \Guzzle\Http\Exception\BadResponseException &&
      $e->getResponse()->getStatusCode() == 404
    ) {
      return NULL;
    }

    // Otherwise log the issue and throw a VirginException
    watchdog(
      'virgin_user',
      'Failed to fetch ticket (@rego) from SugarCRM: @err',
      array(
        '@rego' => $rego,
        '@err' => $e->getMessage()
      )
    );

    throw new VirginException($e->getMessage(), t("Oops! We're sprinting to fix this error and we hope to be back on track shortly."));
  }
}

/**
 * Fetch a grapher object containing the event related to the given
 * ticket rego
 *
 * @param $ticket_rego
 *  The ticket rego ID
 * @return \VirginEntityGrapher|Null
 *  An object containing the event graphers or null
 */
function virgin_user_ticket_event($ticket_rego) {
  $query = db_select('virgin_user_tickets', 'tickets');

  $query->join('field_data_field_sugar_id', 'sugar', 'sugar.field_sugar_id_value = tickets.event_id');
  $query->join('field_data_field_event_state', 'ev', 'ev.field_event_state_target_id = sugar.entity_id');
  $query->join('node', 'nev', 'nev.nid = ev.entity_id AND nev.status = 1');

  $query->addField('nev', 'nid', 'event_node_id');

  $query
    ->condition('tickets.attendly_rego_id', $ticket_rego, '=')
    ->condition('tickets.ticket_status', 'active', '=')
    ->condition('nev.type', 'event', '=')
  ;

  $event_id = $query->execute()->fetchField();

  $node = node_load($event_id);

  return empty($node) ? NULL : new VirginEntityGrapher('node', $node);
}
