<?php
/**
 * @file
 * Code for the Virgin User feature.
 */

include_once 'virgin_user.features.inc';

/**
 * Implements hook_menu_alter().
 */
function virgin_user_menu_alter(&$items) {

  // Restrict certain user administration routes to website administrators.
  $admin_routes = array(
    'user/%user/hybridauth',
    'user/%user/hybridauth/delete'
  );

  foreach ($admin_routes as $route) {
    $items[$route]['access callback'] = 'user_access';
    $items[$route]['access arguments'] = array('administer site configuration');
  }
}

/**
 * Implements hook_username_alter().
 */
function virgin_user_username_alter(&$name, $account) {

  // Set the visible username from the user's given name and surname.
  if ($account->uid) {
    $account_wrapper = entity_metadata_wrapper('user', $account);
    $given_name = $account_wrapper->field_first_name->value();
    $surname = $account_wrapper->field_last_name->value();
    $full_name = trim($given_name . ' ' . $surname);

    // In some cases, such as the user administration view, the account object
    // might not be fully loaded. In those cases, fallback to the username with
    // the user ID.
    if (empty($full_name)) {
      $name = '(' . $account->uid . ') ' . $name;
    }
    else {
      $name = $full_name;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form.
 */
function virgin_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  // The user cannot change his SugarCRM ID as this is entirely
  // managed automatically by the system.
  $form['field_sugar_id']['#access'] = FALSE;

  // The user cannot modify these fields after registration, as
  // such remove them from the profile form.
  $form['field_first_name']['#access'] = FALSE;
  $form['field_last_name']['#access'] = FALSE;
  $form['field_gender']['#access'] = FALSE;

  // The other medical conditions field is only visible when
  // the user has picked the 'Other' option in the medical
  // conditions field.
  $form['field_medical_conditions_other']['#states'] = array(
    'visible' => array(
      ':input[name="field_medical_conditions[und]"]' => array('value' => 'Other')
    )
  );

  // If any medical information has been submitted, then
  // the user must agree to share his medical info.
  $form['field_agree_share_medical_info']['#states'] = array(
    'required' => array(
      ':input[name="field_medical_conditions[und]"]' => array('!value' => "_none"),
      ':input[name="field_medical_conditions_other[und]"]' => array('filled' => TRUE),
      ':input[name="field_medications[und]"]' => array('filled' => TRUE),
      ':input[name="field_allergies[und]"]' => array('filled' => TRUE),
    )
  );

  // Add custom validation callback
  $form['#validate'][] = 'virgin_user_form_user_profile_form_validate';
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 *
 * Maps the user profile information from the social network at registration
 * time to the fields in the user's Drupal profile.
 */
function virgin_user_hybridauth_userinfo_alter(&$userinfo, $data) {

  // If the authentication is not being done via Facebook, bail out.
  if (empty($data['provider']) || $data['provider'] != 'Facebook') {
    return;
  }

  $defaults = array(
    'firstName' => null,
    'lastName' => null,
    'gender' => null,
    'birthDay' => null,
    'birthMonth' => null,
    'birthYear' => null,
    'phone' => null,
    'city' => null,
    'country' => null,
    'address' => null,
    'region' => null,
    'zip' => null,
  );

  $data = $data + $defaults;

  $birth_date = strtotime($data['birthYear'] . '/' . $data['birthMonth'] . '/' . $data['birthDay']);

  $userinfo['field_address_city'][LANGUAGE_NONE][0]['value'] = $data['city'];
  $userinfo['field_address_country'][LANGUAGE_NONE][0]['value'] = $data['country'];
  $userinfo['field_address_line_1'][LANGUAGE_NONE][0]['value'] = $data['address'];
  $userinfo['field_address_postcode'][LANGUAGE_NONE][0]['value'] = $data['zip'];
  $userinfo['field_address_state'][LANGUAGE_NONE][0]['value'] = $data['region'];
  $userinfo['field_contact_number'][LANGUAGE_NONE][0]['value'] = $data['phone'];
  $userinfo['field_first_name'][LANGUAGE_NONE][0]['value'] = $data['firstName'];
  $userinfo['field_last_name'][LANGUAGE_NONE][0]['value'] = $data['lastName'];
  $userinfo['field_gender'][LANGUAGE_NONE][0]['value'] = $data['gender'];
  $userinfo['field_birth_date'][LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', $birth_date);
}

/**
 * Implements hook_user_insert().
 */
function virgin_user_user_insert(&$edit, $account, $category) {
  observer_notify('drupal:user:create', $account);
}

/**
 * Implements hook_user_update().
 */
function virgin_user_user_update(&$edit, $account, $category) {
  observer_notify('drupal:user:update', $account);
}

// Helpers
// ----------------------------------------------------------------------------

/**
 * Validation callback for the user_profile_form form.
 *
 * @see virgin_user_form_user_profile_form_alter()
 */
function virgin_user_form_user_profile_form_validate(&$form, &$form_state) {

  // Utility anonymous function to fetch field values
  $value = function ($field_name) use ($form_state) {
    return empty($form_state['values'][$field_name]['und'][0]['value']) ? null : $form_state['values'][$field_name]['und'][0]['value'];
  };

  // Validate the user cannot save profile form with medical info if he does
  // not agree to share that information.
  $has_medical_conditions = false;

  $medical_fields = array(
    'field_medical_conditions',
    'field_medical_conditions_other',
    'field_medications',
    'field_allergies'
  );

  // If any field is filled, then the user has medical conditions
  foreach ($medical_fields as $field) {
    if ($value($field)) {
      $has_medical_conditions = TRUE;
      break;
    }
  }

  $agree_share = (bool) $value('field_agree_share_medical_info');

  if (!$agree_share && $has_medical_conditions) {
    form_set_error('field_agree_share_medical_info', t('You must agree to share your medical information if you fill any of the medical fields.'));
  }
}
