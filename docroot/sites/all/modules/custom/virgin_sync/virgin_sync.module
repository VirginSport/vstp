<?php
/**
 * @file
 * Main file for the Virgin Sync module.
 */

/**
 * Execute permission
 */
define('VIRGIN_SYNC_PERM_EXECUTE', 'execute virgin sync');

/**
 * Last sync timestamp variable
 */
define('VIRGIN_SYNC_VAR_LAST_SYNC', 'virgin_sync_last_sync');

/**
 * Implements hook_menu().
 */
function virgin_sync_menu() {
  $items = array();

  $items['admin/content/virgin-sync'] = array(
    'title' => 'Sync Content',
    'page callback' => 'virgin_sync_batch',
    'access arguments' => array(VIRGIN_SYNC_PERM_EXECUTE),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function virgin_sync_permission() {
  return array(
    VIRGIN_SYNC_PERM_EXECUTE =>  array(
      'title' => t('Execute Sync'),
      'description' => t('Allows the user to execute the sync mechanism.'),
    ),
  );
}

// Helpers
// ----------------------------------------------------------------------------

/**
 * Gets the list of all registered sync handlers
 *
 * @return VirginSyncHandlerInterface[]
 */
function virgin_sync_handlers() {
  return module_invoke_all('virgin_sync_handlers');
}

/**
 * Executes the sync batch operation
 */
function virgin_sync_batch() {
  $last_sync = variable_get(VIRGIN_SYNC_VAR_LAST_SYNC, 0);

  $batch = array(
    'title' => t('Virgin Sync'),
    'init_message' => t('Synchronization process is starting'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error ocurred while syncing'),
    'operations' => _virgin_sync_batch_sugar_operations($last_sync), // For now only sugar ops exist
    'finished' => '_virgin_sync_batch_finished',
  );

  batch_set($batch);

  // In CLI mode batch processing is handled by Drush
  if (!drupal_is_cli()) {
    batch_process('admin/content');
  }
}

/**
 * Gets a list of sugar sync operations to be executed in batch
 *
 * @param int $sync_from
 *  Timestamp of the time the beans should be fetched from
 * @return array
 *  An array of batch operations
 *
 * @see virgin_sync_batch()
 */
function _virgin_sync_batch_sugar_operations($sync_from = 0) {
  $operations = array();

  // Get all sugar handlers
  $handlers = array_filter(virgin_sync_handlers(), function ($handler) {
    return $handler instanceof VirginSyncSugarHandlerInterface;
  });

  // Get all handlers by bean name
  $bean_handlers = array();

  foreach ($handlers as $handler) {
    $bean_handlers[$handler->bean()][] = $handler;
  };

  // Call sugarcrm to fetch the latest changes per identified bean
  $sugar = sugarcrm_client();

  foreach ($bean_handlers as $bean_name => $handlers) {
    $path = sprintf('%s/modified-since/%d', $bean_name, $sync_from);
    $ids = $sugar->getEndpoint($path);

    // Note: this guard needed to be added as for some reason the
    // sugar lib author decided empty arrays should be cast to
    // false. Go figure.
    if (!$ids) {
      continue;
    }

    // Create a batch operation per id/handler
    foreach ($ids as $id) {
      foreach ($handlers as $handler) {
        $operations[] = array('_virgin_sync_batch_process', array($handler, $id));
      }
    }
  }

  return $operations;
}

/**
 * Sync batch process callback
 *
 * @param \VirginSyncHandlerInterface $handler
 *  The handler that will process the object with the given external id
 * @param $external_id
 *  The external ID of the object to be handled
 * @param $context
 *  The batch context array
 *
 * @see virgin_sync_batch()
 */
function _virgin_sync_batch_process(VirginSyncHandlerInterface $handler, $external_id, &$context) {
  $data = null;

  // Setup the status messages
  $args = array('@name' => get_class($handler), '@id' => $external_id);
  $create_message = t("Create [@name] (@id)", $args);
  $update_message = t("Update [@name] (@id)", $args);
  $ignore_message = t("Ignore [@name] (@id)", $args);

  // Fetch data from Sugar if it's a Sugar handler. As it stands
  // there are only Sugar handlers at the moment. This specific part
  // might have to be rethought if more types of handlers are added.
  if ($handler instanceof VirginSyncSugarHandlerInterface) {
    $data = sugarcrm_client()->retrieve($handler->bean(), $external_id);
  }

  // If data is still empty, bailout as there's nothing to be handled.
  if (!$data) {
    $context['message'] = $ignore_message;
    return;
  }

  // Finally, pass the data to the handler itself.
  $grapher = new VirginGrapher($data);

  if ($handler->exists($external_id)) {
    $context['message'] = $update_message;
    $handler->update($grapher, $external_id);
  } else {
    $context['message'] = $create_message;
    $handler->create($grapher, $external_id);
  }
}

/**
 * Sync batch finish callback
 *
 * @see virgin_sync_batch()
 */
function _virgin_sync_batch_finished() {

  // Store the timestamp of the last successful sync
  variable_set(VIRGIN_SYNC_VAR_LAST_SYNC, time());

  // And let the user know the sync has finished
  drupal_set_message(t("Content synchronization sucessfully finished."));
}
