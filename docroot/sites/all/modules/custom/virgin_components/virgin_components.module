<?php
/**
 * @file
 * Code for the Virgin Components feature.
 */

define('VIRGIN_ATTENDLY_IFRAME_RENDERED', 'attendly_component_rendered');

include_once 'virgin_components.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function virgin_components_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('panels', 'panelizer', 'ctools', 'page_manager'))) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 *
 * This need to be added so that we can override default fieldable_panel_panes
 * and paragraphs items hook suggestions
 *
 * @see virgin_components_preprocess()
 */
function virgin_components_theme() {
  return array(
    'virgin_components' => array(
      'render element' => 'elements',
      'template'  => 'virgin-components',
    ),
    'virgin_components__ct__festival_header' => array(
      'variables' => array(),
      'template' => 'virgin-components__ct__festival_header',
    ),
    'virgin_components__ct__contact_form' => array(
      'variables' => array(),
      'template' => 'virgin-components__ct__contact_form',
    ),
    'virgin_components__ct__festival_subnav' => array(
      'variables' => array(),
      'template' => 'virgin-components__ct__festival-subnav',
    ),
    'virgin_components__ct__page_header' => array(
      'variables' => array(),
      'template' => 'virgin-components__ct__page_header',
    ),
    'virgin_components__ct__results_overview' => array(
      'variables' => array(),
      'template' => 'virgin-components--ct--results-overview',
    ),
    'virgin_components__ct__festival_results_card' => array(
      'template'  => 'virgin-components__ct__festival-results-card',
      'variables' => array(
        'festival' => '',
        'festival_state' => '',
        'image_atom' => '',
        'events' => array(),
        'link_url' => '',
        'brand_color' => '',
      )
    ),
    'virgin_components__ct__results_table' => array(
      'variables' => array(
        'show_top' => false,
        'is_summary' => false,
        'is_truncated' => true,
        'brand_color' => 'blue',
        'results_path' => '',
        'replay_path' => '',
        'photo_path' => '',
        'festival_id' => '',
        'festival_name' => '',
        'event_id' => '',
        'event_name' => '',
        'event_date' => '',
        'event_description' => '',
        'unit' => '',
        'max_rows' => 10
      ),
      'template' => 'virgin-components__ct__results_table',
    ),
    'virgin_components__ct__attendly_iframe' => array(
      'template'  => 'virgin-components__ct__attendly-iframe',
      'variables' => array(
        'url' => '',
      )
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function virgin_components_preprocess(&$variables) {
  // The supported hooks list
  $supported = array(
    'paragraphs_item',
    'fieldable_panels_pane'
  );

  // If hook is not supported bail out
  if (empty($variables['elements']['#entity_type']) || !in_array($variables['elements']['#entity_type'], $supported)) {
    return;
  }

  // Loop between components list and if any of the components supports this
  // entity_type and bundle preprocess it and override theme suggestion
  foreach (virgin_components_list() as $component) {
    if ($component->supports($variables['elements']['#entity_type'], $variables['elements']['#bundle'])) {
      $component->preProcess($variables);

      $variables['theme_hook_suggestions'] = array($component->themeSuggestion());
    }
  }
}

/**
 * Implements hook_ctools_plugin_post_alter().
 */
function virgin_components_ctools_plugin_post_alter(&$plugin, &$info) {
  if (!empty($plugin['name']) && $plugin['name'] == 'fieldable_panels_pane') {
    $plugin['admin title'] = '_virgin_components_fieldable_panels_pane_admin_title';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form.
 */
function virgin_components_form_fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form_alter(&$form, &$form_state) {
  if ($form['#bundle'] == 'vs_mylaps_track_my_runner') {
    $form['notice'] = array(
      '#markup' => t('<p>If an event is selected, the MyLaps ID stored in the selected event will take precedence over the MyLaps ID entered in the component.</p>')
    );
  } else if($form['#bundle'] == 'vs_newsletter') {
    $grapher = new VirginEntityGrapher('fieldable_panels_pane',$form['#entity']);

    $form['field_sugar_newsletter_list'][LANGUAGE_NONE]['#options'] = virgin_base_get_newsletter_lists();
    $form['field_sugar_newsletter_list'][LANGUAGE_NONE]['#default_value'] = $grapher->fieldGetOne('field_sugar_newsletter_list');
  }
}

// Helpers
// ----------------------------------------------------------------------------

/**
 * Get list of components
 *
 * @return VirginComponentsInterface[]
 */
function virgin_components_list() {
  $list = &drupal_static(__FUNCTION__);

  if (empty($list)) {
    $list = array(
      // Fieldable Panel Panes Handlers
      new VirginComponentHeroEventCard(),
      new VirginComponentAccordion(),
      new VirginComponentBasicContentBlock(),
      new VirginComponentPromotionalBanner(),
      new VirginComponentTeaserBlock(),
      new VirginComponentHeroBannerBlock(),
      new VirginComponentCTABlock(),
      new VirginComponentGridBlock(),
      new VirginComponentTicketCards(),
      new VirginComponentPackageCards(),
      new VirginComponentUntimedEventCards(),
      new VirginComponentCarousel(),
      new VirginComponentPhotoGallery(),
      new VirginComponentVideoBlock(),
      new VirginComponentVideoBanner(),
      new VirginComponentHootsuiteSocialFeed(),
      new VirginComponentGamefacePhotoGallery(),
      new VirginComponentMyLapsTrackMyRunner(),
      new VirginComponentResultsIntroduction(),
      new VirginComponentResultsOverview(),
      new VirginComponentNewsletter(),

      // Paragraphs Handlers
      new VirginComponentEventFestivalBannerItem(),
      new VirginComponentTeaserItem(),
      new VirginComponentCTABlockItem(),
      new VIrginComponentGridBlockItem(),
      new VirginComponentTicketCardItem(),
      new VirginComponentPackageCardItem(),
      new VirginComponentCustomBannerItem(),
      new VirginComponentUntimedEventCardItem(),
      new VirginComponentSlideItem(),
      new VirginComponentAccordionItem(),
    );
  }

  return $list;
}

/**
 * Overrides admin title callback for fieldable panel panes plugins
 *
 * @see fieldable_panels_panes_fieldable_panels_pane_content_type_admin_title()
 */
function _virgin_components_fieldable_panels_pane_admin_title($subtype, $conf) {
  $entity = fieldable_panels_panes_load_from_subtype($subtype);
  $title = _fieldable_panels_panes_admin_title_from_entity($entity);
  $suffix = '';

  // Add the original language suffix to the component admin title
  if (!empty($entity->language)) {
    $lang = $entity->language;
    $label = ($lang == LANGUAGE_NONE) ? t('None') : strtoupper($lang);
    $suffix = t('[Language: @label]', array('@label' => $label));
  }

  return sprintf('%s %s', $title, $suffix);
}

/**
 * Implements hook_preprocess_panels_ipe_pane_wrapper
 *
 * Remove the CSS button when editing a panel
 */
function virgin_components_preprocess_panels_ipe_pane_wrapper(&$vars) {
  if (!empty($vars['links']['css'])) {
    unset($vars['links']['css']);
  }
}

