<?php
/**
 * @file
 * Code for the Virgin Region feature.
 */

include_once 'virgin_region.features.inc';

/**
 * The region cache key
 */
define('VIRGIN_REGION_CACHE', 'virgin_region:cache');

/**
 * The splash page path
 */
define('VIRGIN_REGION_ROUTE_SPLASH', 'splash');

/**
 * The region hostname cookie key
 */
define('VIRGIN_REGION_COOKIE', 'virgin_sport_region_hostname');

/**
 * Implements hook_views_api().
 */
function virgin_region_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'virgin_region') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function virgin_region_menu() {
  $items = array();

  $items[VIRGIN_REGION_ROUTE_SPLASH] = array(
    'title' => 'Splash Page',
    'page callback' => 'virgin_region_page_splash',
    'access callback' => TRUE,
    'file' => 'virgin_region.page.inc',
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function virgin_region_init() {

  // Fetch the current active region
  $region = virgin_region_current();

  // Build the front-page URL from the current region node it exists or fallback
  // to the splash page path if no region host matches the current hostname.
  if ($region) {
    $front_page = sprintf('node/%d', $region['nid']);
  } else {
    $front_page = VIRGIN_REGION_ROUTE_SPLASH;
  }

  // Finally, override the q path that's used by drupal routing system if we're
  // viewing the page that's set as the front page variable.
  if ($_GET['q'] == variable_get('site_frontpage')) {
    $_GET['q'] = $front_page;
  }
}

/**
 * Implements hook_node_insert().
 */
function virgin_region_node_insert($node) {
  virgin_region_clear_cache($node);
}

/**
 * Implements hook_node_update().
 */
function virgin_region_node_update($node) {
  virgin_region_clear_cache($node);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function virgin_region_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Add submission callback handler
  array_unshift($form['#submit'], 'virgin_region_form_user_register_form_submit');

  // Region is defined by system on user registration
  $form['field_region']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_login.
 */
function virgin_region_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'virgin_region_form_user_login_submit';
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 *
 * Maps the user profile information from the social network at registration
 * time to the fields in the user's Drupal profile.
 */
function virgin_region_hybridauth_userinfo_alter(&$userinfo, $data) {
  // Add current region to user profile
  $current_region = virgin_region_current();

  if ($current_region) {
    $userinfo['field_region'][LANGUAGE_NONE][0]['target_id']= $current_region['nid'];
  }
}

/**
 * Implements hook_hybridauth_user_login().
 */
function virgin_region_hybridauth_user_login($account, $data) {
  virgin_region_user_login_submit($account->uid);
}

// Helpers
// -----------------------------------------------------------------------------

function virgin_region_clear_cache($node) {
  if ($node->type == 'region') {
    cache_clear_all(VIRGIN_REGION_CACHE, 'cache');
  }
}

/**
 * Get the list of active regions
 *
 * @return array
 *  An array of structured arrays with the following keys:
 *  - nid: The nid of the region
 *  - title: The original title of the region
 *  - flag: The atom object of the flag
 *  - hostname: The hostname of the region
 */
function virgin_region_regions() {

  // Return the list of regions from cache
  $cache = cache_get(VIRGIN_REGION_CACHE);

  if (!empty($cache)) {
    return $cache->data;
  }

  // If the cache is empty, fetch the list from the database
  $q = new EntityFieldQuery();

  $results = $q
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'region')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->execute()
  ;

  // And build the required data structure and store it in cache
  $regions = array();

  if (!empty($results['node'])) {
    foreach ($results['node'] as $node) {
      $node_wrapper = entity_metadata_wrapper('node', $node->nid);
      $hostname = $node_wrapper->field_hostname->value();

      $regions[$hostname] = array(
        'nid' => $node->nid,
        'title' => $node_wrapper->title_field->value(),
        'flag' => $node_wrapper->field_flag_image->value(),
        'hostname' => $hostname
      );
    }

    cache_set(VIRGIN_REGION_CACHE, $regions);
  }

  return $regions;
}

/**
 * Get the current active region
 *
 * @return array|null
 *  NULL if no region matches the current URL or a structured array with the
 *  following keys if does:
 *  - nid: The nid of the region
 *  - title: The original title of the region
 *  - flag: The atom object of the flag
 *  - hostname: The hostname of the region
 */
function virgin_region_current() {
  $regions = &drupal_static(__FUNCTION__, array());

  if (!$regions) {
    $regions = virgin_region_regions();
  }

  foreach ($regions as $domain => $region) {
    if ($domain == $_SERVER['HTTP_HOST']) {
      return $region;
    }
  }

  return null;
}

/**
 * Submission callback for the user_register_form form.
 *
 * @see virgin_region_form_user_register_form_alter()
 */
function virgin_region_form_user_register_form_submit(&$form, &$form_state) {
  $current_region = virgin_region_current();

  if ($current_region) {
    $form_state['values']['field_region'][  LANGUAGE_NONE][0]['target_id']= $current_region['nid'];

    // Set current user region cookie on registration
    virgin_region_region_cookie_set($current_region);
  }
}

/**
 * Submission callback for the user_login form.
 *
 * @see virgin_region_form_user_login_alter()
 */
function virgin_region_form_user_login_submit(&$form, &$form_state) {
  virgin_region_user_login_submit($form_state['uid']);
}

/**
 * Login Callback for drupal login and hybridauth login
 *
 * @param $uid
 */
function virgin_region_user_login_submit($uid) {
  $current_region = virgin_region_current();

  if ($current_region) {
    // Set current user region cookie on registration
    virgin_region_region_cookie_set($current_region);
  }

  // Redirect user to its region on login
  virgin_region_user_redirect($uid, $current_region);
}

/**
 * Redirect user to its region.
 *
 * @param $uid
 * The account uid
 * @param $current_region
 * The Region array
 */
function virgin_region_user_redirect($uid, $current_region) {
  global $is_https;

  $account_wrapper = entity_metadata_wrapper('user', $uid);

  // Redirect user to its correspondent region if available
  if ($account_wrapper->field_region && $account_wrapper->field_region->getIdentifier()) {

    // Load account region
    $region = $account_wrapper->field_region->value();

    // Get the hostname for the loaded region
    $hostname = $region->field_hostname[LANGUAGE_NONE][0]['value'];

    // If the user is already on his region, bailout now.
    if ($current_region && $current_region['hostname'] == $hostname) {
      return;
    }

    // Otherwise redirect the user to his profile page on his host region
    $protocol = $is_https ? 'https' : 'http';
    $url = sprintf('%s://%s/user', $protocol, $hostname);

    // Unset destination, otherwise url is ignored
    unset($_GET['destination']);

    drupal_goto($url);
  }
}

/**
 *  Set the region cookie hostname
 *  @param $current_region
 *  The Region array
 */
function virgin_region_region_cookie_set($current_region) {
  global $cookie_domain;

  if ($current_region) {
    // Set cookie with one year expire in milliseconds (365 * 24 * 60 * 60)
    setcookie(VIRGIN_REGION_COOKIE, $current_region['hostname'], time() + 31536000, "/", $cookie_domain);
  }
}
