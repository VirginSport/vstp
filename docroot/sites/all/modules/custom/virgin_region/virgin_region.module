<?php
/**
 * @file
 * Code for the Virgin Region feature.
 */

include_once 'virgin_region.features.inc';

/**
 * The region cache key
 */
define('VIRGIN_REGION_CACHE', 'virgin_region:cache');

/**
 * The splash page path
 */
define('VIRGIN_REGION_ROUTE_SPLASH', 'splash');

/**
 * The region hostname cookie key
 */
define('VIRGIN_REGION_COOKIE', 'vs_region_hostname');

/**
 * The hostname of the default region
 *
 * If this variable is set and a region with this hostname exists, users will be
 * automatically redirected to this region when visiting the splash page.
 */
define('VIRGIN_REGION_VAR_DEFAULT_REGION', 'vs_region_default_hostname');

/**
 * The region cache key for geo
 */
define('VIRGIN_REGION_CACHE_GEO_MAPPING', 'virgin_region_geo_mapping:cache');

/**
 * The region variable key for geo
 */
define('VIRGIN_REGION_VARIABLE_GEO_MAPPING', 'virgin_region_geo_mapping_variable');

/**
 * Implements hook_views_api().
 */
function virgin_region_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'virgin_region') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function virgin_region_menu() {
  $items = array();

  $items[VIRGIN_REGION_ROUTE_SPLASH] = array(
    'title' => 'Splash Page',
    'page callback' => 'virgin_region_page_splash',
    'access callback' => TRUE,
    'file' => 'virgin_region.page.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function virgin_region_theme($existing, $type, $theme, $path) {
  $default = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme'
  );

  return array(
    'virgin_region_page_splash' => array(
      'template' => 'virgin-region-page-splash',
      'variables' => array(
        'regions' => array(),
      )
    ) + $default,
  );
}

/**
 * Implements hook_init().
 */
function virgin_region_init() {
  global $cookie_domain;

  // Fetch the current active region
  $region = virgin_region_current();

  // Add js variable to check if region is available or not
  drupal_add_js(array('virgin_region' => array('region_available' => !empty($region))), array('type' => 'setting'));

  // Add Javascript files to handle region cookie and redirection to correct region
  drupal_add_js(array('virgin_region' => array('cookie_domain' => $cookie_domain)), array('type' => 'setting'));
  
  // Build the front-page URL from the current region node it exists or fallback
  // to the splash page path if no region host matches the current hostname.
  if ($region) {
    $front_page = sprintf('node/%d', $region['nid']);
  } else {
    $front_page = VIRGIN_REGION_ROUTE_SPLASH;
  }

  // Finally, override the q path that's used by drupal routing system if we're
  // viewing the page that's set as the front page variable.
  if ($_GET['q'] == variable_get('site_frontpage')) {
    $_GET['q'] = $front_page;
  }
}

/**
 * Implements hook_node_insert().
 */
function virgin_region_node_insert($node) {
  virgin_region_clear_cache($node);
}

/**
 * Implements hook_node_update().
 */
function virgin_region_node_update($node) {
  virgin_region_clear_cache($node);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function virgin_region_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Add submission callback handler
  array_unshift($form['#submit'], 'virgin_region_form_user_register_form_submit');

  // Region is defined by system on user registration
  $form['field_region']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function virgin_region_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Add submission callback handler
  array_unshift($form['#submit'], 'virgin_region_form_user_profile_form_submit');
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 *
 * Maps the user profile information from the social network at registration
 * time to the fields in the user's Drupal profile.
 */
function virgin_region_hybridauth_userinfo_alter(&$userinfo, $data) {
  // Add current region to user profile
  $current_region = virgin_region_current();

  if ($current_region) {
    $userinfo['field_region'][LANGUAGE_NONE][0]['target_id']= $current_region['nid'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for page theme.
 */
function virgin_region_preprocess_page(&$vars) {

  // Inject the regions into the JS setting in order that javascript running
  // on the page can know the regions that exist and which is active.
  $current = virgin_region_current();
  $regions = virgin_region_regions();

  $list = array();
  foreach ($regions as $region) {
    $list[] = array(
      'title' => $region['title'],
      'hostname' => $region['hostname'],
      'address' => virgin_region_add_hostname_protocol($region['hostname']),
      'active' => empty($current) ? FALSE : ($region['hostname'] == $current['hostname'])
    );
  }

  drupal_add_js(array('vsRegions' => $list), 'setting');
}

// Helpers
// -----------------------------------------------------------------------------

function virgin_region_clear_cache($node) {
  if ($node->type == 'region') {
    cache_clear_all(VIRGIN_REGION_CACHE, 'cache');
  }
}

/**
 * Get a region by its nid
 *
 * @param $nid
 *  The region nid
 *
 * @return []|null
 */
function virgin_region_region_load($nid) {
  $regions = virgin_region_regions();

  foreach ($regions as $region) {
    if ($region['nid'] == $nid) {
      return $region;
    }
  }

  return NULL;
}

/**
 * Get the list of active regions
 *
 * @return array
 *  An array of structured arrays with the following keys:
 *  - nid: The nid of the region
 *  - title: The original title of the region
 *  - country_letter_code: The country 2 letter code
 *  - flag: The atom object of the flag
 *  - hostname: The hostname of the region
 */
function virgin_region_regions() {

  // To avoid errors in drush do not run this function in cli mode
  if (drupal_is_cli()) {
    return array();
  }

  // Return the list of regions from cache
  $cache = cache_get(VIRGIN_REGION_CACHE);

  if (!empty($cache)) {
    return $cache->data;
  }

  // If the cache is empty, fetch the list from the database
  $q = new EntityFieldQuery();

  $results = $q
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'region')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->execute()
  ;

  // And build the required data structure and store it in cache
  $regions = array();

  if (!empty($results['node'])) {
    foreach ($results['node'] as $node) {
      $node_wrapper = entity_metadata_wrapper('node', $node->nid);
      $hostname = $node_wrapper->field_hostname->value();

      $regions[$hostname] = array(
        'nid' => $node->nid,
        'title' => $node_wrapper->title_field->value(),
        'sugar_newsletter' => $node_wrapper->field_sugar_newsletter_list->value(),
        'country_letter_code' => $node_wrapper->field_country_letter_code->value(),
        'flag' => $node_wrapper->field_flag_image->value(),
        'icon' => $node_wrapper->field_icon_image->value(),
        'is_default' => (variable_get(VIRGIN_REGION_VAR_DEFAULT_REGION) == $hostname),
        'hostname' => $hostname,
        'show_cookies_alert' => $node_wrapper->field_show_cookies_alert->value(),
      );
    }

    cache_set(VIRGIN_REGION_CACHE, $regions);
  }

  return $regions;
}

/**
 * Get the current active region
 *
 * @return array|null
 *  NULL if no region matches the current URL or a structured array with the
 *  following keys if does:
 *  - nid: The nid of the region
 *  - title: The original title of the region
 *  - country_letter_code: The country 2 letter code
 *  - flag: The atom object of the flag
 *  - hostname: The hostname of the region
 */
function virgin_region_current() {
  $regions = &drupal_static(__FUNCTION__, array());

  if (!$regions) {
    $regions = virgin_region_regions();
  }

  foreach ($regions as $domain => $region) {
    if ($domain == $_SERVER['HTTP_HOST']) {
      return $region;
    }
  }

  return array();
}

/**
 * Submission callback for the user_register_form form.
 *
 * @see virgin_region_form_user_register_form_alter()
 */
function virgin_region_form_user_register_form_submit(&$form, &$form_state) {
  $current_region = virgin_region_current();

  if ($current_region) {
    $form_state['values']['field_region'][LANGUAGE_NONE][0]['target_id']= $current_region['nid'];

    // Set current user region cookie on registration
    virgin_region_region_cookie_set($current_region);
  }
}

/**
 * Submit callback for the user_profile_form form.
 *
 * @see virgin_region_form_user_profile_form_alter()
 */
function virgin_region_form_user_profile_form_submit(&$form, &$form_state) {
  $region_id = null;

  if (!empty($form_state['values']['field_region'][LANGUAGE_NONE][0]['target_id'])) {
    $region_id = $form_state['values']['field_region'][LANGUAGE_NONE][0]['target_id'];
  }

  $region = virgin_region_region_load($region_id);

  if (!empty($region)) {  
    // Set user region cookie on registration
    virgin_region_region_cookie_set($region);
  }
}


/**
 * Redirect user to its region.
 *
 * @param $uid
 *  The account uid
 * @param $current_region
 *  The region array
 * @param string $destination
 *  The destination the user should be redirected to under the user's region
 */
function virgin_region_user_redirect($uid, $current_region, $destination = 'user') {
  $account_wrapper = entity_metadata_wrapper('user', $uid);

  // Redirect user to its correspondent region if available
  $region = $account_wrapper->field_region->value();

  if (!empty($region)) {

    // Get the hostname for the loaded region
    $hostname = $region->field_hostname[LANGUAGE_NONE][0]['value'];

    // If the hostname is empty, bailout now
    if (empty($hostname)) {
      return;
    }

    // Ensure the regional cookie is always set to the user's preferred region
    virgin_cookie_set(VIRGIN_REGION_COOKIE, $hostname);

    // If the user is already on his region, bailout
    if ($current_region && $current_region['hostname'] == $hostname) {
      return;
    }

    // If the destination URL is for some reason external, redirect the user
    // to his region profile page, otherwise fetch the path alias.
    if (url_is_external($destination)) {
      $destination = 'user';
    } else {
      $destination = drupal_get_path_alias($destination);
    }

    // Build the final redirection URL with the correct protocol
    $url = virgin_region_add_hostname_protocol($hostname . '/' . $destination);

    // Ensure destination parameter is unset, or drupal_goto will not redirect
    // to the url but to the destination.
    unset($_GET['destination']);

    // And finally, redirect the user to his region
    drupal_goto($url);
  }
}

/**
 * Append the protocol to the hostname
 *
 * @param $hostname
 *  An hostname without the protocol e.g. uk.virginsport.com
 * @return string
 *  The hostname with the protocol e.g. http://uk.virginsport.com
 */
function virgin_region_add_hostname_protocol($hostname) {
  global $is_https;

  $protocol = $is_https ? 'https' : 'http';
  return sprintf('%s://%s', $protocol, $hostname);
}

/**
 * Set the region cookie hostname
 *
 * @param $current_region
 *  The region array
 */
function virgin_region_region_cookie_set($current_region) {
  global $cookie_domain;

  if ($current_region) {
    // Set cookie with one year expire in milliseconds (365 * 24 * 60 * 60)
    setcookie(VIRGIN_REGION_COOKIE, $current_region['hostname'], time() + 31536000, "/", $cookie_domain);
  }
}

/**
 * Checks if the given hostname is of a valid region
 *
 * @param $check_hostname
 *  The hostname to be checked
 * @return bool
 *  TRUE it's a valid region hostname, FALSE otherwise
 */
function virgin_region_valid_hostname($check_hostname) {
  foreach (virgin_region_regions() as $hostname => $region) {
    if ($hostname == $check_hostname) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Get the current user preferred region hostname
 *
 * @return string
 *  The region hostname or an empty string if no valid hostname could be found
 */
function virgin_region_user_hostname() {
  global $user;

  $account_wrapper = entity_metadata_wrapper('user', $user->uid);
  $region = $account_wrapper->field_region->value();
  $hostname = '';

  if (!empty($region->field_hostname['und'][0]['value'])) {
    $hostname = $region->field_hostname['und'][0]['value'];
  }

  return virgin_region_valid_hostname($hostname) ? $hostname : '';
}


/**
 * Get the current active region footer visible links
 *
 * @return array|null
 *  NULL if no region matches the current URL or a structured array with the
 *  following keys if does:
 *  - url: The url of the link
 *  - title: The escaped title of the link
 *  - active: A boolean indicating if the link is active
 */
function virgin_region_footer_links() {
  $current_region = virgin_region_current();

  if (!$current_region) {
    return array();
  }

  $menu_items = &drupal_static(__FUNCTION__, array());

  if (!isset($menu_items[$current_region['nid']])) {
    $region = node_load($current_region['nid']);
    $g = new VirginEntityGrapher('node', $region);
    $items = array();

    foreach($g->fieldGetAll('field_links') as $link) {
      if (isset($link['attributes']['virgin_show']) && !$link['attributes']['virgin_show']) {
        continue;
      }

      // As the URL is printed in the template using the l() function the
      // title is passed trough check_plain() in there so here we pass it raw
      $items[] = [
        'url' => $link['url'],
        'title' => $link['title'],
        'visible' => !empty($link['attributes']['virgin_show'])
      ];
    }

    $menu_items[$current_region['nid']] = $items;
  }

  return $menu_items[$current_region['nid']];
}


/**
 * Implements hook_form_FORM_ID_alter() for region_node_form.
 *
 * Injects the sugar remote newsletter target lists into the form and
 * sets the stored value as default.
 */
function virgin_region_form_region_node_form_alter(&$form, $form_state) {
  $form['field_sugar_newsletter_list'][LANGUAGE_NONE]['#options'] = virgin_base_get_newsletter_lists();

  if (!empty($form['#node_edit_form'])) {
    $grapher = new VirginEntityGrapher('node', $form['#entity']);
    $form['field_sugar_newsletter_list'][LANGUAGE_NONE]['#default_value'] = $grapher->fieldGetOne('field_sugar_newsletter_list');
  }
}

/*
 * Get the current region footer newsletter target list
 *
 * @return string
 *  The current region footer newsletter list
 */
function virgin_region_get_current_region_newsletter_list() {
  $newsletter_list = &drupal_static(__FUNCTION__, array());

  if (!$newsletter_list) {
    $region = virgin_region_current();

    if (!isset($region['sugar_newsletter'])) return $newsletter_list;

    $newsletter_list = $region['sugar_newsletter'];
  }

  return $newsletter_list;
}

/**
 * Implements hook_entity_presave().
 *
 * The hook is used to seed the VIRGIN_REGION_VARIABLE_GEO variable
 */
function virgin_region_entity_presave($entity, $type) {
  if ($type == 'node' && $entity->type == 'region') {
    $variable = variable_get(VIRGIN_REGION_VARIABLE_GEO_MAPPING, array());

    $original_letter_code = '';
    if (!empty($entity->original->field_country_letter_code[LANGUAGE_NONE])) {
      $original_letter_code = $entity->original->field_country_letter_code[LANGUAGE_NONE][0]['value'];
    }

    // Unset the old value to substitute for the new
    if (isset($variable[$original_letter_code])) {
      unset($variable[$original_letter_code]);
    }

    $region = new VirginEntityGrapher('node', $entity);
    $hostname = $region->fieldGetOne('field_hostname');
    $letter_code = $region->fieldGetOne('field_country_letter_code');

    $variable[$letter_code] = $hostname;
    variable_set(VIRGIN_REGION_VARIABLE_GEO_MAPPING, $variable);

    // Invalidate the cache to load the regions again: Should we seed it here?
    cache_clear_all(VIRGIN_REGION_CACHE_GEO_MAPPING, 'cache');
  }
}

/**
 * Implements hook_boot()
 *
 * Redirects the user for his region in case he is in a defined region
 */
function virgin_region_boot() {
  global $user, $base_url;

  // If in cli mode ignore this function
  if (drupal_is_cli()) {
    return ;
  }

  // We check uid instead of user_is_anonymous because the function isn't
  // available yet. If the user is logged in he already has a preference and the
  // system knows how to handle it
  if ($user->uid > 0) {
    return ;
  }

  require_once DRUPAL_ROOT . '/includes/path.inc';
  $path = !drupal_is_front_page() ? current_path() : '';

  // If not front page or register bail out
  if (!empty($path) && $path != 'user/register') {
    return ;
  }

  $regions = virgin_region_get_geo_mapping();

  // Flip the array to hostname be the key
  $flipped_regions = array_flip($regions);

  // Fetch hostname cookie so the user is redirected to his prefered
  $favorite_hostname = virgin_cookie_get(VIRGIN_REGION_COOKIE, '');
  $host = parse_url($base_url, PHP_URL_HOST);

  // Check if the hostname in the cookie is a valid one
  // or if the URL is valid (deeplink)
  if (isset($flipped_regions[$favorite_hostname]) || isset($flipped_regions[$host])) {
    return ;
  }

  $hostname = virgin_get_hostname_by_ip($regions);
  if (empty($hostname)) {
    return ;
  }

  require_once DRUPAL_ROOT . '/includes/common.inc';
  virgin_region_redirect_to_hostname($hostname, $path, drupal_get_query_parameters());
}

/**
 * Returns the
 *
 * @return array with the regions mapped to be used in geoip logic
 */
function virgin_region_get_geo_mapping() {
  // If the regions are not in cache set it
  $regions = cache_get(VIRGIN_REGION_CACHE_GEO_MAPPING, 'cache');
  if (empty($regions)) {
    $regions = variable_get(VIRGIN_REGION_VARIABLE_GEO_MAPPING, array());
    cache_set(VIRGIN_REGION_CACHE_GEO_MAPPING, $regions);
  } else {
    $regions = $regions->data;
  }

  return $regions;
}

/**
 * Fetches the hostname the user should see based on the visitor's location
 * checked by IP
 *
 * @param array $regions
 *  Optional parameter to be used in case you already loaded the region in the
 *  request (Geo mapped)
 *
 * @return string
 *  Return the string with the hostname if the visitor location is valid,
 *  FALSE otherwise
 */
function virgin_get_hostname_by_ip($regions = array()) {
  if (empty($regions)) {
    $regions = virgin_region_get_geo_mapping();
  }

  $country_code = drupal_get_http_header('X-Geo-Country');
  // If the header is not filled, the default is given (AA)
  // or the region is not valid bailout
  if (empty($country_code) || $country_code == 'AA' || !isset($regions[$country_code])) {
    return FALSE;
  }

  return $regions[$country_code];
}

/**
 * Redirects user to the given path in the given hostname with the provided
 * params to query_string
 *
 * @param $hostname
 *  string hostname to redirect
 * @param $path
 *  string internal path
 * @param $params
 *  parameters to insert in query string
 */
function virgin_region_redirect_to_hostname($hostname, $path, $params = array()) {
  // This function might be called in hook_boot
  require_once DRUPAL_ROOT . '/includes/language.inc';
  require_once DRUPAL_ROOT . '/includes/common.inc';

  $current_language = language_initialize('language');

  $url = $hostname . url($path, array('language' => $current_language, 'query' => $params));
  $url = virgin_region_add_hostname_protocol($url);

  drupal_goto($url, array('external' => TRUE), 301);
}


/*
 * Get the current region setting if the cookie alert should be visible or not
 *
 * @return bool
 *  TRUE - If the cookie alert should be visible
 *  FALSE - Otherwise
 */
function virgin_region_current_region_show_cookie() {
  $show_cookie = &drupal_static(__FUNCTION__, FALSE);

  if (!$show_cookie) {
    $region = virgin_region_current();

    if(!isset($region['show_cookies_alert'])) return $show_cookie;

    $show_cookie = $region['show_cookies_alert'];
  }

  return $show_cookie;
}
