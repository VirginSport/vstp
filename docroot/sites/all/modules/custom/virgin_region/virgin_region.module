<?php
/**
 * @file
 * Code for the Virgin Region feature.
 */

include_once 'virgin_region.features.inc';

/**
 * The region cache key
 */
define('VIRGIN_REGION_CACHE', 'virgin_region:cache');

/**
 * The splash page path
 */
define('VIRGIN_REGION_ROUTE_SPLASH', 'splash');

/**
 * The region hostname cookie key
 */
define('VIRGIN_REGION_COOKIE', 'vs_region_hostname');

/**
 * Implements hook_views_api().
 */
function virgin_region_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'virgin_region') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function virgin_region_menu() {
  $items = array();

  $items[VIRGIN_REGION_ROUTE_SPLASH] = array(
    'title' => 'Splash Page',
    'page callback' => 'virgin_region_page_splash',
    'access callback' => TRUE,
    'file' => 'virgin_region.page.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function virgin_region_theme($existing, $type, $theme, $path) {
  $default = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme'
  );

  return array(
    'virgin_region_page_splash' => array(
      'template' => 'virgin-region-page-splash',
      'variables' => array(
        'regions' => array(),
      )
    ) + $default,
  );
}

/**
 * Implements hook_init().
 */
function virgin_region_init() {

  // Fetch the current active region
  $region = virgin_region_current();

  // Build the front-page URL from the current region node it exists or fallback
  // to the splash page path if no region host matches the current hostname.
  if ($region) {
    $front_page = sprintf('node/%d', $region['nid']);
  } else {
    $front_page = VIRGIN_REGION_ROUTE_SPLASH;
  }

  // Finally, override the q path that's used by drupal routing system if we're
  // viewing the page that's set as the front page variable.
  if ($_GET['q'] == variable_get('site_frontpage')) {
    $_GET['q'] = $front_page;
  }
}

/**
 * Implements hook_node_insert().
 */
function virgin_region_node_insert($node) {
  virgin_region_clear_cache($node);
}

/**
 * Implements hook_node_update().
 */
function virgin_region_node_update($node) {
  virgin_region_clear_cache($node);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function virgin_region_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Add submission callback handler
  array_unshift($form['#submit'], 'virgin_region_form_user_register_form_submit');

  // Region is defined by system on user registration
  $form['field_region']['#access'] = FALSE;
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 *
 * Maps the user profile information from the social network at registration
 * time to the fields in the user's Drupal profile.
 */
function virgin_region_hybridauth_userinfo_alter(&$userinfo, $data) {
  // Add current region to user profile
  $current_region = virgin_region_current();

  if ($current_region) {
    $userinfo['field_region'][LANGUAGE_NONE][0]['target_id']= $current_region['nid'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for page theme.
 */
function virgin_region_preprocess_page(&$vars) {

  // Inject the regions into the JS setting in order that javascript running
  // on the page can know the regions that exist and which is active.
  $current = virgin_region_current();
  $regions = virgin_region_regions();

  $list = array();
  foreach ($regions as $region) {
    $list[] = array(
      'title' => $region['title'],
      'hostname' => $region['hostname'],
      'address' => virgin_region_add_hostname_protocol($region['hostname']),
      'active' => empty($current) ? FALSE : ($region['hostname'] == $current['hostname'])
    );
  }

  drupal_add_js(array('vsRegions' => $list), 'setting');
}

// Helpers
// -----------------------------------------------------------------------------

function virgin_region_clear_cache($node) {
  if ($node->type == 'region') {
    cache_clear_all(VIRGIN_REGION_CACHE, 'cache');
  }
}

/**
 * Get the list of active regions
 *
 * @return array
 *  An array of structured arrays with the following keys:
 *  - nid: The nid of the region
 *  - title: The original title of the region
 *  - country_letter_code: The country 2 letter code
 *  - flag: The atom object of the flag
 *  - hostname: The hostname of the region
 */
function virgin_region_regions() {

  // Return the list of regions from cache
  $cache = cache_get(VIRGIN_REGION_CACHE);

  if (!empty($cache)) {
    return $cache->data;
  }

  // If the cache is empty, fetch the list from the database
  $q = new EntityFieldQuery();

  $results = $q
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'region')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->execute()
  ;

  // And build the required data structure and store it in cache
  $regions = array();

  if (!empty($results['node'])) {
    foreach ($results['node'] as $node) {
      $node_wrapper = entity_metadata_wrapper('node', $node->nid);
      $hostname = $node_wrapper->field_hostname->value();

      $regions[$hostname] = array(
        'nid' => $node->nid,
        'title' => $node_wrapper->title_field->value(),
        'country_letter_code' => $node_wrapper->field_country_letter_code->value(),
        'flag' => $node_wrapper->field_flag_image->value(),
        'icon' => $node_wrapper->field_icon_image->value(),
        'hostname' => $hostname
      );
    }

    cache_set(VIRGIN_REGION_CACHE, $regions);
  }

  return $regions;
}

/**
 * Get the current active region
 *
 * @return array|null
 *  NULL if no region matches the current URL or a structured array with the
 *  following keys if does:
 *  - nid: The nid of the region
 *  - title: The original title of the region
 *  - country_letter_code: The country 2 letter code
 *  - flag: The atom object of the flag
 *  - hostname: The hostname of the region
 */
function virgin_region_current() {
  $regions = &drupal_static(__FUNCTION__, array());

  if (!$regions) {
    $regions = virgin_region_regions();
  }

  foreach ($regions as $domain => $region) {
    if ($domain == $_SERVER['HTTP_HOST']) {
      return $region;
    }
  }

  return null;
}

/**
 * Submission callback for the user_register_form form.
 *
 * @see virgin_region_form_user_register_form_alter()
 */
function virgin_region_form_user_register_form_submit(&$form, &$form_state) {
  $current_region = virgin_region_current();

  if ($current_region) {
    $form_state['values']['field_region'][LANGUAGE_NONE][0]['target_id']= $current_region['nid'];

    // Set current user region cookie on registration
    virgin_region_region_cookie_set($current_region);
  }
}

/**
 * Redirect user to its region.
 *
 * @param $uid
 *  The account uid
 * @param $current_region
 *  The region array
 * @param string $destination
 *  The destination the user should be redirected to under the user's region
 */
function virgin_region_user_redirect($uid, $current_region, $destination = 'user') {
  $account_wrapper = entity_metadata_wrapper('user', $uid);

  // Redirect user to its correspondent region if available
  $region = $account_wrapper->field_region->value();

  if (!empty($region)) {

    // Get the hostname for the loaded region
    $hostname = $region->field_hostname[LANGUAGE_NONE][0]['value'];

    // If the hostname empty, bailout now.
    if (empty($hostname)) {
      return;
    }

    // Ensure the regional cookie is always set to the user's preferred region
    virgin_cookie_set(VIRGIN_REGION_COOKIE, $hostname);

    // If the user is already on his region, bailout.
    if ($current_region && $current_region['hostname'] == $hostname) {
      return;
    }

    // If the destination URL is for some reason external, redirect the user
    // to his region profile page, otherwise fetch the path alias.
    if (url_is_external($destination)) {
      $destination = 'user';
    } else {
      $destination = drupal_get_path_alias($destination);
    }

    // Build the final redirection URL with the correct protocol
    $url = virgin_region_add_hostname_protocol($hostname . '/' . $destination);

    // Ensure destination parameter is unset, or drupal_goto will not redirect
    // to the url but to the destination.
    unset($_GET['destination']);

    // And finally, redirect the user to his region
    drupal_goto($url);
  }
}

/**
 * Append the protocol to the hostname
 *
 * @param $hostname
 *  An hostname without the protocol e.g. uk.virginsport.com
 * @return string
 *  The hostname with the protocol e.g. http://uk.virginsport.com
 */
function virgin_region_add_hostname_protocol($hostname) {
  global $is_https;

  $protocol = $is_https ? 'https' : 'http';
  return sprintf('%s://%s', $protocol, $hostname);
}

/**
 * Set the region cookie hostname
 *
 * @param $current_region
 *  The region array
 */
function virgin_region_region_cookie_set($current_region) {
  global $cookie_domain;

  if ($current_region) {
    // Set cookie with one year expire in milliseconds (365 * 24 * 60 * 60)
    setcookie(VIRGIN_REGION_COOKIE, $current_region['hostname'], time() + 31536000, "/", $cookie_domain);
  }
}

/**
 * Checks if the given hostname is of a valid region
 *
 * @param $check_hostname
 *  The hostname to be checked
 * @return bool
 *  TRUE it's a valid region hostname, FALSE otherwise
 */
function virgin_region_valid_hostname($check_hostname) {
  foreach (virgin_region_regions() as $hostname => $region) {
    if ($hostname == $check_hostname) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Get the current user preferred region hostname
 *
 * @return string
 *  The region hostname or an empty string if no valid hostname could be found
 */
function virgin_region_user_hostname() {
  global $user;

  $account_wrapper = entity_metadata_wrapper('user', $user->uid);
  $region = $account_wrapper->field_region->value();
  $hostname = '';

  if (!empty($region->field_hostname['und'][0]['value'])) {
    $hostname = $region->field_hostname['und'][0]['value'];
  }

  return virgin_region_valid_hostname($hostname) ? $hostname : '';
}
