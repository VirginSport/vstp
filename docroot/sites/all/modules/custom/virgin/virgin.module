<?php

/**
 * @file
 * Main file for virgin module.
 */

/**
 * The attendly user facing instance base URL variable.
 */
define('VIRGIN_VAR_ATTENDLY_URL', 'virgin_attendly_url');

/**
 * The attendly API instance base URL variable.
 */
define('VIRGIN_VAR_ATTENDLY_API_URL', 'virgin_attendly_api_url');

/**
 * The attendly API username variable.
 */
define('VIRGIN_VAR_ATTENDLY_API_USER', 'virgin_attendly_api_user');

/**
 * The attendly API password variable.
 */
define('VIRGIN_VAR_ATTENDLY_API_PASS', 'virgin_attendly_api_pass');

/**
 * Implements hook_menu().
 */
function virgin_menu() {
  $items = array();

  $items['admin/config/virgin'] = array(
    'title' => 'Virgin Sport',
    'description' => 'Configure virgin sport website.',
    'position' => 'left',
    'weight' => -30,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/virgin/social-networks'] = array(
    'title' => 'Social Networks',
    'description' => 'Social networks configuration for the Virgin Sport website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virgin_admin_social_networks_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'virgin.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_boot().
 */
function virgin_boot() {

  // Provides a more graceful exception handler than what Drupal core provides.
  set_exception_handler('_virgin_exception_handler');
}

/**
 * Implements hook_theme().
 */
function virgin_theme($existing, $type, $theme, $path) {
  $base = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme',
  );

  return array();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function virgin_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('panels', 'panelizer', 'ctools', 'page_manager'))) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_themes_enabled().
 */
function virgin_themes_enabled($theme_list) {

  // Lightning distribution automatically enables lightningdemo theme at
  // install time. Disable the theme and force virginsport theme enabled.
  // @see lightning_install()
  if (in_array('lightningdemo', $theme_list)) {
    variable_set('theme_default', 'virginsport');
    theme_enable(array('virginsport'));
    theme_disable(array('lightningdemo'));
  }
}

/**
 * Implements hook_scald_extra_modes().
 */
function virgin_scald_extra_modes() {
  return array(
    'virgin_full' => array(
      'title' => t('Full'),
      'formats'    => array(),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for page theme.
 */
function virgin_preprocess_page(&$vars) {
  // If Panels IPE is being rendered, or is an admin page, ensure CKEDITOR PATH
  // is set so that the editor properly loads.
  if (path_is_admin(current_path()) || !empty($vars['page']['page_bottom']['panels_ipe'])) {
    $path = base_path() . drupal_get_path('module', 'editor_ckeditor') . '/lib/ckeditor/';
    drupal_add_js(sprintf('window.CKEDITOR_BASEPATH = "%s";', $path), 'inline');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for panels_edit_style_type_form.
 *
 * Ensures only virgin curve panels region style is available for selection
 * in the region style select form.
 */
function virgin_form_panels_edit_style_type_form_alter(&$form, &$form_state) {

  // Currently we do not allow users to select styles for panes and only for
  // regions. If the user is attempting to modify the style of a pane, block
  // him.
  if ($form_state['type'] == 'pane') {
    $form['notice']['#markup'] = t('There are no styles available for panes. Only regions can be styled at this moment.');
    $form['style']['#access'] = FALSE;
    $form['submit']['#access'] = FALSE;
    return;
  }

  // Otherwise, override the style options to only allow him to select the
  // virgin curve region style.
  $form['style']['#options'] = array(
    'curve' => t('Virgin Curve')
  );

  $form['style']['#default_value'] = 'curve';
}

/**
 * Implements hook_form_FORM_ID_alter() for panels_edit_settings_type_form.
 */
function virgin_form_panels_edit_style_settings_form_alter(&$form, &$form_state) {
  // Fixes panels wrong render attribute for the description field.
  $form['description']['#markup'] = $form['description']['#value'];
}

// Helpers
// -----------------------------------------------------------------------------

/**
 * Get the list of available social networks for Virgin Sport.
 *
 * @return array
 *  An array of social network names keyed by identifier.
 */
function virgin_social_networks() {
  return array(
    'facebook' => 'Facebook',
    'instagram' => 'Instagram',
    'snapchat' => 'Snapchat',
    'twitter' => 'Twitter',
  );
}

/**
 * Form API e-mail validation callback
 */
function virgin_element_email_validate($element, &$form_state, $form) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('The e-mail address you inserted is not valid.'));
  }
}

/**
 * Provides a custom PHP exception handler for Virgin Sports
 *
 * Uncaught exceptions are those not enclosed in a try/catch block. They are
 * always fatal: the execution of the script will stop as soon as the exception
 * handler exits.
 *
 * @param $exception
 *   The exception object that was thrown.
 *
 * @see virgin_boot().
 */
function _virgin_exception_handler($exception) {

  // If it's an unhandled VirginException, attempt to handle it "gracefully".
  if ($exception instanceof VirginException) {
    if ($exception->hasUserMessage()) {
      drupal_set_message($exception->getUserMessage(), 'error');
    }

    // If redirect path configured send user to it, otherwise send 500 error
    if ($exception->getRedirectPath()) {
      // Redirect to configured path
      drupal_goto($exception->getRedirectPath());
    } else {
      drupal_goto('<front>');
    }
  }
  else {
    // Otherwise fallback to Drupal core behavior.
    _drupal_exception_handler($exception);
  }
}

/**
 * Get a field value from a given form state
 *
 * @param $field_name
 *  The field name to get the value from
 * @param $form_state
 *  The form state where the field value is to be extracted from
 * @param $default
 *  (optional) The default value to be returned, defaults to NULL
 * @param int $index
 *  (optional) The field index value, defaults to 0
 * @param string $language
 *  (optional) The language of the field, defaults to 'und'
 * @return mixed|null
 */
function virgin_form_value($field_name, $form_state, $default = NULL, $index = 0, $language = LANGUAGE_NONE) {
  if (!empty($form_state['values'][$field_name])) {
    if (is_scalar($form_state['values'][$field_name])) {
      return $form_state['values'][$field_name];
    } else {
      return empty($form_state['values'][$field_name][$language][$index]['value']) ? $default : $form_state['values'][$field_name][$language][$index]['value'];
    }
  }

  return $default;
}

/**
 * Gets the global instance of an attendly client
 *
 * @return \VirginAttendlyClient
 *  The configured attendly client
 */
function virgin_attendly_client() {
  $client = &drupal_static(__FUNCTION__, FALSE);

  if (!$client) {
    $client = new VirginAttendlyClient(
      variable_get(VIRGIN_VAR_ATTENDLY_URL),
      variable_get(VIRGIN_VAR_ATTENDLY_API_URL),
      variable_get(VIRGIN_VAR_ATTENDLY_API_USER),
      variable_get(VIRGIN_VAR_ATTENDLY_API_PASS)
    );
  }

  return $client;
}

/**
 * Return an array of ticket banner with the following properties:
 *  - key
 *  - desktop title
 *  - mobile title
 *  - color
 *
 * @return array
 */
function virgin_ticket_banner_properties() {
  $tickets = &drupal_static(__FUNCTION__, array());

  if (empty($tickets)) {
    $path = DRUPAL_ROOT . '/' . dirname(drupal_get_filename('module', 'virgin'));
    $file = fopen($path . '/ticket-banner-colors.csv', 'r');

    while ($data = fgetcsv($file)) {
      $tickets[$data[0]] = $data;
    }

    fclose($file);
  }

  return $tickets;
}

