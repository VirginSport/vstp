<?php

/**
 * @file
 * Main file for virgin module.
 */

/**
 * The attendly environment key. The value of this var is the suffix that
 * is applied to the cookies that are created to and for attendly.
 */
define('VIRGIN_VAR_ATTENDLY_ENV', 'virgin_attendly_env');

/**
 * The attendly user facing instance base URL variable.
 */
define('VIRGIN_VAR_ATTENDLY_URL', 'virgin_attendly_url');

/**
 * The attendly API instance base URL variable.
 */
define('VIRGIN_VAR_ATTENDLY_API_URL', 'virgin_attendly_api_url');

/**
 * The attendly API username variable.
 */
define('VIRGIN_VAR_ATTENDLY_API_USER', 'virgin_attendly_api_user');

/**
 * The attendly API password variable.
 */
define('VIRGIN_VAR_ATTENDLY_API_PASS', 'virgin_attendly_api_pass');

/**
 * The cipher key variable. This variable needs to contain a 16 bytes key.
 */
define('VIRGIN_VAR_CIPHER_KEY', 'virgin_cipher_key');

/**
 * The get in touch url variable.
 */
define('VIRGIN_VAR_GET_IN_TOUCH_URL', 'virgin_get_in_touch_url');

/**
 * The name of the drupal static variable where virgin alerts are stored.
 */
define('VIRGIN_STATIC_ALERTS', 'virgin_alerts');

/**
 * Implements hook_menu().
 */
function virgin_menu() {
  $items = array();

  $items['admin/config/virgin'] = array(
    'title' => 'Virgin Sport',
    'description' => 'Configure virgin sport website.',
    'position' => 'left',
    'weight' => -30,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/virgin/social-networks'] = array(
    'title' => 'Social Networks',
    'description' => 'Social networks configuration for the Virgin Sport website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virgin_admin_social_networks_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'virgin.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_boot().
 */
function virgin_boot() {

  // Provides a more graceful exception handler than what Drupal core provides.
  set_exception_handler('_virgin_exception_handler');
}

/**
 * Implements hook_init().
 */
function virgin_init() {

  // Check if the current route is for a 'state' node and if the user can access
  _virgin_check_state_node_access();
}

/**
 * Implements hook_theme().
 */
function virgin_theme($existing, $type, $theme, $path) {
  $base = array(
    'file' => 'theme.inc',
    'path' => $path . '/theme',
  );

  return array();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function virgin_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('panels', 'panelizer', 'ctools', 'page_manager'))) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_library_alter().
 */
function virgin_library_alter(&$libraries, $module) {
  // Override default chosen to allow it on mobile
  if ($module == 'chosen' && function_exists('libraries_get_path')) {
    $library_path = libraries_get_path('custom_chosen');

    $libraries['chosen']['js'] = array(
      $library_path . '/chosen.jquery.min.js' => array(),
    );
  }
}

/**
 * Implements hook_themes_enabled().
 */
function virgin_themes_enabled($theme_list) {

  // Lightning distribution automatically enables lightningdemo theme at
  // install time. Disable the theme and force virginsport theme enabled.
  // @see lightning_install()
  if (in_array('lightningdemo', $theme_list)) {
    variable_set('theme_default', 'virginsport');
    theme_enable(array('virginsport'));
    theme_disable(array('lightningdemo'));
  }
}

/**
 * Implements hook_scald_extra_modes().
 */
function virgin_scald_extra_modes() {
  return array(
    'virgin_full' => array(
      'title' => t('Full'),
      'formats'    => array(),
    ),
  );
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function virgin_page_delivery_callback_alter(&$callback, $page_callback_result) {
  $path = current_path();

  // Register not found and access denied errors into gtm

  if ($page_callback_result == MENU_NOT_FOUND) {
    virgin_gtm()->addError(sprintf('The page "%s" was not found.', $path));
  }

  if ($page_callback_result == MENU_ACCESS_DENIED) {
    virgin_gtm()->addError(sprintf('You are not authorized to access the page "%s".', $path));
  }
}

/**
 * Implements hook_filter_default_formats_alter().
 */
function virgin_filter_default_formats_alter( &$formats ) {
  foreach ($formats as $key => $format) {
    if (empty($format['filters']['filter_html']['settings']['allowed_html'])) continue;
  
    $formats[$key]['filters']['filter_html']['settings']['allowed_html'] .= ' <br>';
  }
}

/**
 * Implements hook_preprocess_HOOK() for page theme.
 */
function virgin_preprocess_page(&$vars) {
  // If Panels IPE is being rendered, or is an admin page, ensure CKEDITOR PATH
  // is set so that the editor properly loads.
  if (path_is_admin(current_path()) || !empty($vars['page']['page_bottom']['panels_ipe'])) {
    $path = base_path() . drupal_get_path('module', 'editor_ckeditor') . '/lib/ckeditor/';
    drupal_add_js(sprintf('window.CKEDITOR_BASEPATH = "%s";', $path), 'inline');
  }

  // Inject the variables required at JS level
  $params = session_get_cookie_params();

  drupal_add_js(array(
    'virgin' => array(
      'raceDayUrl' => variable_get('virgin_raceday_url'),
      'cookieDomain' => $params['domain'],
      'cookieSecure' => $params['secure']
    )
  ), 'setting');
}

/**
 * Implements hook_form_FORM_ID_alter() for panels_edit_style_type_form.
 *
 * Ensures only virgin curve panels region style is available for selection
 * in the region style select form.
 */
function virgin_form_panels_edit_style_type_form_alter(&$form, &$form_state) {

  // Currently we do not allow users to select styles for panes and only for
  // regions. If the user is attempting to modify the style of a pane, block
  // him.
  if ($form_state['type'] == 'pane') {
    $form['notice']['#markup'] = t('There are no styles available for panes. Only regions can be styled at this moment.');
    $form['style']['#access'] = FALSE;
    $form['submit']['#access'] = FALSE;
    return;
  }

  // Otherwise, override the style options to only allow him to select the
  // virgin curve region style.
  $form['style']['#options'] = array(
    'curve' => t('Virgin Curve')
  );

  $form['style']['#default_value'] = 'curve';
}

/**
 * Implements hook_form_FORM_ID_alter() for panels_edit_settings_type_form.
 */
function virgin_form_panels_edit_style_settings_form_alter(&$form, &$form_state) {
  // Fixes panels wrong render attribute for the description field.
  $form['description']['#markup'] = $form['description']['#value'];
}

/**
 * Implements hook_panels_post_render().
 */
function virgin_panels_post_render($renderer) {

  // If the panelizer is not for a node, bailout now.
  if (empty($renderer->context['panelizer']->data->nid)) {
    return;
  }

  $node = $renderer->context['panelizer']->data;

  // Helper function to add IPE toolbar buttons
  $add_button = function ($label, $url, $key) use ($renderer) {
    $button = array(
      '#type' => 'link',
      '#title' => $label,
      '#href' => $url,
      '#options' => array('query' => drupal_get_destination()),
      '#attributes' => array(
        'class' => array('panels-ipe-pseudobutton'),
      ),
      '#prefix' => '<div class="panels-ipe-pseudobutton-container">',
      '#suffix' => '</div>',
    );

    panels_ipe_toolbar_add_button($renderer->cache_key, $key, $button);
  };

  if (node_access('update', $node)) {
    $add_button(t('Edit Contents'), sprintf('node/%d/edit', $node->nid), 'virgin-node-edit');
  }

  if (_workbench_moderation_access('view history', $node)) {
    $add_button(t('View Revisions'), sprintf('node/%d/moderation', $node->nid), 'virgin-node-moderation');
  }
}

// Helpers
// -----------------------------------------------------------------------------

/**
 * Get the list of available social networks for Virgin Sport.
 *
 * @return array
 *  An array of social network names keyed by identifier.
 */
function virgin_social_networks() {
  return array(
    'facebook' => 'Facebook',
    'instagram' => 'Instagram',
    'snapchat' => 'Snapchat',
    'twitter' => 'Twitter',
  );
}

/**
 * Form API e-mail validation callback
 */
function virgin_element_email_validate($element, &$form_state, $form) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('The e-mail address you inserted is not valid.'));
  }
}

/**
 * Provides a custom PHP exception handler for Virgin Sports
 *
 * Uncaught exceptions are those not enclosed in a try/catch block. They are
 * always fatal: the execution of the script will stop as soon as the exception
 * handler exits.
 *
 * @param $exception
 *  The exception object that was thrown.
 *
 * @see virgin_boot().
 */
function _virgin_exception_handler($exception) {

  // If it's an unhandled VirginException, attempt to handle it "gracefully"
  if ($exception instanceof VirginException) {

    // Register exceptions in GTM
    virgin_gtm()->addError($exception->getUserMessage());

    if ($exception->hasUserMessage()) {
      drupal_set_message($exception->getUserMessage(), 'error');
    }

    // If redirect path is configured send user to it, otherwise send the user
    // to the home page.
    if ($exception->getRedirectPath()) {
      drupal_goto($exception->getRedirectPath());
    } else {
      drupal_goto('<front>');
    }
  }
  else {
    // Otherwise fallback to Drupal core behavior.
    _drupal_exception_handler($exception);
  }
}

/**
 * Get a field value from a given form state
 *
 * @param $field_name
 *  The field name to get the value from
 * @param $form_state
 *  The form state where the field value is to be extracted from
 * @param $default
 *  (optional) The default value to be returned, defaults to NULL
 * @param int $index
 *  (optional) The field index value, defaults to 0
 * @param string $language
 *  (optional) The language of the field, defaults to 'und'
 * @return mixed|null
 */
function virgin_form_value($field_name, $form_state, $default = NULL, $index = 0, $language = LANGUAGE_NONE) {
  if (!empty($form_state['values'][$field_name])) {
    if (is_scalar($form_state['values'][$field_name])) {
      return $form_state['values'][$field_name];
    } else {
      return empty($form_state['values'][$field_name][$language][$index]['value']) ? $default : $form_state['values'][$field_name][$language][$index]['value'];
    }
  }

  return $default;
}

/**
 * Gets the global instance of an attendly client
 *
 * @return \VirginAttendlyClient
 *  The configured attendly client
 */
function virgin_attendly_client() {
  $client = &drupal_static(__FUNCTION__, FALSE);

  if (!$client) {
    $client = new VirginAttendlyClient(
      variable_get(VIRGIN_VAR_ATTENDLY_URL),
      variable_get(VIRGIN_VAR_ATTENDLY_API_URL),
      variable_get(VIRGIN_VAR_ATTENDLY_API_USER),
      variable_get(VIRGIN_VAR_ATTENDLY_API_PASS)
    );
  }

  return $client;
}

/**
 * Gets the global instance of gtm handler
 *
 * @return \VirginGtm
 */
function virgin_gtm() {
  $gtm = &drupal_static(__FUNCTION__, FALSE);

  if (!$gtm) {
    $gtm = new VirginGtm();
  }

  return $gtm;
}

/**
 * Gets the value of a query parameter with the given name
 *
 * @param string $key
 *  The query parameter name
 * @param string $default_value
 *  The default value of the parameter if it's missing
 * @return string
 *  Either the default value or the value of the query parameter
 */
function virgin_param($key, $default_value = '') {
  return empty($_GET[$key]) ? $default_value : $_GET[$key];
}

/**
 * Gets the value of a cookie with the given name
 *
 * @param string $key
 *  The cookie name
 * @param string $default_value
 *  The default value of the cookie if it's missing
 * @return string
 *  Either the default value or the value of the cookie
 */
function virgin_cookie_get($key, $default_value = '') {
  return empty($_COOKIE[$key]) ? $default_value : $_COOKIE[$key];
}

/**
 * Sets a cookie with the given name and value
 *
 * @param $name
 *  The name of the cookie
 * @param $value
 *  The value of the cookie
 */
function virgin_cookie_set($name, $value) {
  $params = session_get_cookie_params();
  setcookie($name, $value, -1, $params['path'], $params['domain'], $params['secure']);
}

/**
 * Unsets a cookie with the given name
 *
 * @param $name
 *  The name of the cookie
 */
function virgin_cookie_unset($name) {
  unset($_COOKIE[$name]);
  $params = session_get_cookie_params();
  setcookie($name, '', time() - 3600, $params['path'], $params['domain'], $params['secure']);
}

/**
 * Gets the global instance of a virgin cipher
 *
 * @return \VirginCipher
 *  The configured virgin cipher
 */
function virgin_cipher() {
  $cipher = &drupal_static(__FUNCTION__, FALSE);

  if (!$cipher) {
    $cipher = new VirginCipher(variable_get(VIRGIN_VAR_CIPHER_KEY));
  }

  return $cipher;
}

/**
 * Return an array of ticket banner with the following properties:
 *
 * @return array
 *  An array of structured arrays with the following keys:
 *  - key: The name
 *  - desktop title: The desktop title
 *  - mobile title: The mobile title
 *  - color: The color
 *
 */
function virgin_ticket_banner_properties() {
  $tickets = &drupal_static(__FUNCTION__, array());

  if (!empty($tickets)) {
    return $tickets;
  }

  $fields = array();
  $path = DRUPAL_ROOT . '/' . dirname(drupal_get_filename('module', 'virgin'));
  $file = fopen($path . '/ticket-banner-colors.csv', 'r');

  while ($row = fgetcsv($file, 4096)) {
    if (empty($fields)) {
      $fields = $row;
      continue;
    }

    $key = $row[0];
    foreach ($row as $k => $value) {
      $tickets[$key][$fields[$k]] = $value;
    }
  }

  fclose($file);

  return $tickets;
}

/**
 * Disables direct access to nodes that represent synchronizable state nodes
 */
function _virgin_check_state_node_access() {

  // If the we're handling a node/% path, check if the type of node, and if
  // the node is one of the 'state' nodes either redirect the user to the
  // content overview page if he has access or show a page not found.
  if (!empty($_GET['q']) && strpos($_GET['q'], 'node/') === 0) {
    $item = menu_get_item();

    if ($item['path'] != 'node/%' || empty($item['map'][1]->type)) {
      return;
    }

    $node_type = $item['map'][1]->type;

    $state_node_types = array(
      'festival_state',
      'event_state',
      'package_state',
      'ticket_type_state',
      'package',
      'ticket_type'
    );

    if (!in_array($node_type, $state_node_types)) {
      return;
    }

    if (user_access('access content overview')) {
      drupal_goto('/admin/content');
    } else {
      drupal_not_found();
      drupal_exit();
    }
  }
}

/**
 * Get a DateTime object for the given timestamp/timezone configuration
 *
 * @param $timestamp
 *  The timestamp of the date
 * @param string $tz_to
 *  The timezone the date interval should be converted to
 * @param string $tz_from
 *  The timezone the timestamps are relative to
 * @return \DateTime
 */
function virgin_date($timestamp, $tz_to = 'UTC', $tz_from = 'UTC') {
  try {
    $tz_from = new DateTimeZone($tz_from);
    $tz_to = new DateTimeZone($tz_to);

  } catch (\Exception $e) {

    // Fallback to UTC if the timezone is invalid and log the issue
    watchdog(
      'virgin',
      'Could not create timezone for date: @err',
      array('@err' => $e->getMessage()),
      WATCHDOG_ERROR
    );

    $tz_from = new DateTimeZone('UTC');
    $tz_to = new DateTimeZone('UTC');
  }

  $date = new \DateTime('now', $tz_from);

  return $date->setTimestamp($timestamp)->setTimezone($tz_to);
}

/**
 * Get the list of alerts added for this request
 *
 * Differs from drupal_get_messages in that the alerts added are not persisted
 * in a session but only exist for the duration of the current request.
 *
 * @return array
 *  An a array of not escaped strings.
 */
function virgin_get_alerts() {
  return drupal_static(VIRGIN_STATIC_ALERTS, array());
}

/**
 * Adds an alert to the current request
 *
 * @param $message
 *  The alert message
 *
 * @see virgin_get_alerts()
 */
function virgin_set_alert($message) {
  if (!empty($message)) {
    $alerts = &drupal_static(VIRGIN_STATIC_ALERTS, array());
    $alerts[] = $message;
  }
}
